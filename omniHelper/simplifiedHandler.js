// simplifiedHandler.js - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
// –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤ content.js

class SimplifiedAppealHandler {
    constructor() {
        this.autoResponseEnabled = true;
        this.domObserver = null;
        this.lastCheck = 0;
        this.checkInterval = 60000; // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (reduced from 30s)
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ Simplified Appeal Handler initializing...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await this.loadSettings();
        this.autoResponseEnabled = settings.autoResponseEnabled !== false;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ DOM
        this.startDOMObserver();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–µ–∂–µ)
        setInterval(() => this.periodicCheck(), this.checkInterval);
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => this.checkForAppeals('initial'), 3000);
        
        console.log('‚úÖ Handler initialized. Auto-response:', this.autoResponseEnabled ? 'ON' : 'OFF');
    }
    
    async loadSettings() {
        return new Promise(resolve => {
            chrome.storage.local.get(['autoResponseEnabled'], result => {
                resolve(result || {});
            });
        });
    }
    
    // DOM Observer - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    startDOMObserver() {
        this.domObserver = new MutationObserver((mutations) => {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫
            const now = Date.now();
            if (now - this.lastCheck < 10000) return; // –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
            
            let foundNewAppeal = false;
            
            for (const mutation of mutations) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    for (const node of mutation.addedNodes) {
                        if (node.nodeType === Node.ELEMENT_NODE && this.isAppealElement(node)) {
                            foundNewAppeal = true;
                            break;
                        }
                    }
                }
                if (foundNewAppeal) break;
            }
            
            if (foundNewAppeal) {
                this.lastCheck = now;
                console.log('üîç New appeal element detected');
                this.checkForAppeals('dom-mutation');
            }
        });
        
        // –ù–∞–±–ª—é–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        const containers = [
            document.querySelector('#scroll-box-root'),
            document.querySelector('.appeals-list'),
            document.querySelector('.chat-list')
        ].filter(Boolean);
        
        containers.forEach(container => {
            this.domObserver.observe(container, {
                childList: true,
                subtree: true
            });
        });
        
        console.log('üëÅÔ∏è DOM Observer started for', containers.length, 'containers');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
    isAppealElement(element) {
        if (!element) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        if (element.getAttribute('data-testid') === 'appeal-preview') return true;
        if (element.getAttribute('data-appeal-id')) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        const className = element.className || '';
        if (className.includes('appeal') || className.includes('chat-item')) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–µ—Ä–∞ (–Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
        const text = element.textContent || '';
        if (/\d+\s*—Å–µ–∫/i.test(text) && parseInt(text.match(/(\d+)/)[1]) < 60) {
            return true;
        }
        
        return false;
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    periodicCheck() {
        const now = Date.now();
        if (now - this.lastCheck < 20000) return; // –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 20 —Å–µ–∫—É–Ω–¥
        
        this.lastCheck = now;
        this.checkForAppeals('periodic');
    }
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
    async checkForAppeals(source) {
        if (!this.autoResponseEnabled) {
            console.log('üö´ Auto-response disabled');
            return;
        }
        
        console.log(`üîç Checking for appeals (source: ${source})`);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏–π
        const appealElements = this.findAppealElements();
        console.log(`üìä Found ${appealElements.length} appeal elements`);
        
        let addedCount = 0;
        
        for (const element of appealElements) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
            const appealInfo = this.extractAppealInfo(element);
            
            if (!appealInfo || !appealInfo.id) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–æ–µ –ª–∏ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ
            if (!this.isNewAppeal(element, appealInfo)) continue;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if (window.unifiedCoordinator) {
                const added = await window.unifiedCoordinator.addToQueue(
                    appealInfo.id,
                    element,
                    source
                );
                
                if (added) {
                    addedCount++;
                    console.log(`‚úÖ Added to queue: ${appealInfo.id}`);
                    
                    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
                    this.markElementAsQueued(element);
                }
            } else {
                console.error('‚ùå UnifiedCoordinator not available');
                break;
            }
        }
        
        if (addedCount > 0) {
            console.log(`üéâ Added ${addedCount} new appeals to queue`);
        }
    }
    
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
    findAppealElements() {
        const selectors = [
            '[data-testid="appeal-preview"]',
            '[data-appeal-id]',
            '.appeal-item',
            '.chat-item'
        ];
        
        const elements = [];
        
        for (const selector of selectors) {
            const found = document.querySelectorAll(selector);
            elements.push(...Array.from(found));
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return [...new Set(elements)];
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    extractAppealInfo(element) {
        const info = {
            id: null,
            hasTimer: false,
            timerSeconds: null
        };
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID
        const text = element.textContent || '';
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ ID
        const patterns = [
            /–û–±—Ä–∞—â–µ–Ω–∏–µ\s*‚Ññ\s*(\d{5,})/i,
            /Appeal[:\s#‚Ññ]+(\d{5,})/i,
            /#(\d{5,})/,
            /ID[:\s]+(\d{5,})/i,
            /‚Ññ\s*(\d{5,})/
        ];
        
        for (const pattern of patterns) {
            const match = text.match(pattern);
            if (match) {
                info.id = match[1];
                break;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        if (!info.id) {
            info.id = element.dataset?.appealId || 
                     element.dataset?.appealid ||
                     element.getAttribute('data-appeal-id');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä
        const timerMatch = text.match(/(\d+)\s*—Å–µ–∫/i);
        if (timerMatch) {
            const seconds = parseInt(timerMatch[1]);
            if (seconds < 60) {
                info.hasTimer = true;
                info.timerSeconds = seconds;
            }
        }
        
        return info;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ–≤–æ–µ –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    isNewAppeal(element, appealInfo) {
        // 1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä < 30 —Å–µ–∫—É–Ω–¥ - —Ç–æ—á–Ω–æ –Ω–æ–≤–æ–µ
        if (appealInfo.hasTimer && appealInfo.timerSeconds < 30) {
            console.log(`‚è∞ New appeal with timer: ${appealInfo.timerSeconds}s`);
            return true;
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const hasBadge = !!element.querySelector('[data-testid="badge"], .badge, .new');
        if (hasBadge) {
            console.log('üî¥ New appeal with badge');
            return true;
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        const className = element.className || '';
        if (className.includes('unread') || className.includes('new')) {
            console.log('üìç New appeal by class');
            return true;
        }
        
        return false;
    }
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–º–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    markElementAsQueued(element) {
        element.style.opacity = '0.7';
        element.style.borderLeft = '3px solid #4CAF50';
        element.dataset.omniQueued = 'true';
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            element.style.opacity = '';
            element.style.borderLeft = '';
        }, 10000);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞
    toggleAutoResponse() {
        this.autoResponseEnabled = !this.autoResponseEnabled;
        chrome.storage.local.set({ 
            autoResponseEnabled: this.autoResponseEnabled 
        });
        
        console.log('üîÑ Auto-response:', this.autoResponseEnabled ? 'ON' : 'OFF');
        return this.autoResponseEnabled;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStats() {
        const coordinatorStats = window.unifiedCoordinator ? 
            window.unifiedCoordinator.getStats() : {};
        
        return {
            autoResponseEnabled: this.autoResponseEnabled,
            ...coordinatorStats
        };
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
window.simplifiedHandler = new SimplifiedAppealHandler();

console.log('‚úÖ Simplified Appeal Handler ready');
console.log('Commands:');
console.log('  simplifiedHandler.toggleAutoResponse() - Toggle auto-response');
console.log('  simplifiedHandler.checkForAppeals("manual") - Manual check');
console.log('  simplifiedHandler.getStats() - Get statistics');
console.log('  unifiedCoordinator.getStats() - Coordinator stats');
console.log('  unifiedCoordinator.reset() - Reset all data');