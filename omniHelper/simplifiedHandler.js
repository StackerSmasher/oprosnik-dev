// simplifiedHandler.js - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
// –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤ content.js

class SimplifiedAppealHandler {
    constructor() {
        this.autoResponseEnabled = true;
        this.domObserver = null;
        this.lastCheck = 0;
        this.checkInterval = 60000; // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        this.lastProcessingTime = 0; // Track last processing time for minimum delay
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ Simplified Appeal Handler initializing...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await this.loadSettings();
        this.autoResponseEnabled = settings.autoResponseEnabled !== false;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ DOM
        this.startDOMObserver();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–µ–∂–µ)
        setInterval(() => this.periodicCheck(), this.checkInterval);
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => this.checkForAppeals('initial'), 3000);

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 35 —Å–µ–∫—É–Ω–¥, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç
        this.heartbeatInterval = setInterval(() => this.verifyDetectionActivity(), 35000);

        console.log('‚úÖ Handler initialized. Auto-response:', this.autoResponseEnabled ? 'ON' : 'OFF');
        console.log('üíì Detection heartbeat: Will verify activity every 35 seconds');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    verifyDetectionActivity() {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`üíì [${timestamp}] Detection Heartbeat Check:`);

        let activeDetectors = 0;
        const detectors = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SimplifiedHandler
        if (this.checkInterval !== undefined) {
            activeDetectors++;
            detectors.push('SimplifiedHandler (30s)');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º AppealMonitor
        if (window.appealMonitor && window.appealMonitor.isMonitoring && window.appealMonitor.checkInterval) {
            activeDetectors++;
            detectors.push('AppealMonitor (30s)');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º UnifiedCoordinator
        if (window.unifiedCoordinator) {
            activeDetectors++;
            detectors.push('UnifiedCoordinator');
        }

        console.log(`üìä Active detectors: ${activeDetectors}`);
        detectors.forEach(detector => console.log(`   ‚úÖ ${detector}`));

        if (activeDetectors === 0) {
            console.error('üö® CRITICAL: No detection mechanisms are active!');
            console.log('üîß Attempting to restart SimplifiedHandler...');
            this.checkForAppeals('emergency-restart');
        } else {
            console.log(`‚úÖ Detection system healthy: ${activeDetectors} mechanisms active`);
        }
    }
    
    async loadSettings() {
        return new Promise(resolve => {
            chrome.storage.local.get(['autoResponseEnabled'], result => {
                resolve(result || {});
            });
        });
    }
    
    // DOM Observer - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    startDOMObserver() {
        this.domObserver = new MutationObserver((mutations) => {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫
            const now = Date.now();
            if (now - this.lastCheck < 10000) return; // –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
            
            let foundNewAppeal = false;
            
            for (const mutation of mutations) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    for (const node of mutation.addedNodes) {
                        if (node.nodeType === Node.ELEMENT_NODE && this.isAppealElement(node)) {
                            foundNewAppeal = true;
                            break;
                        }
                    }
                }
                if (foundNewAppeal) break;
            }
            
            if (foundNewAppeal) {
                this.lastCheck = now;
                console.log('üîç New appeal element detected');
                this.checkForAppeals('dom-mutation');
            }
        });
        
        // –ù–∞–±–ª—é–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        const containers = [
            document.querySelector('#scroll-box-root'),
            document.querySelector('.appeals-list'),
            document.querySelector('.chat-list')
        ].filter(Boolean);
        
        containers.forEach(container => {
            this.domObserver.observe(container, {
                childList: true,
                subtree: true
            });
        });
        
        console.log('üëÅÔ∏è DOM Observer started for', containers.length, 'containers');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
    isAppealElement(element) {
        if (!element) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        if (element.getAttribute('data-testid') === 'appeal-preview') return true;
        if (element.getAttribute('data-appeal-id')) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        const className = element.className || '';
        if (className.includes('appeal') || className.includes('chat-item')) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–µ—Ä–∞ (–Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
        const text = element.textContent || '';
        if (/\d+\s*—Å–µ–∫/i.test(text) && parseInt(text.match(/(\d+)/)[1]) < 60) {
            return true;
        }
        
        return false;
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    periodicCheck() {
        const now = Date.now();
        if (now - this.lastCheck < 55000) return; // –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 55 —Å–µ–∫—É–Ω–¥ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)

        this.lastCheck = now;
        console.log('‚è∞ SimplifiedHandler: Starting periodic check (60s interval)');
        this.checkForAppeals('periodic-60s');
    }
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å throttling
    async checkForAppeals(source) {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`üîç [${timestamp}] SimplifiedHandler: Checking for appeals (source: ${source})`);

        if (!this.autoResponseEnabled) {
            console.log('üö´ Auto-response disabled - skipping check');
            return;
        }

        // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        const now = Date.now();
        const timeSinceLastProcessing = now - this.lastProcessingTime;
        if (timeSinceLastProcessing < 5000) {
            const waitTime = 5000 - timeSinceLastProcessing;
            console.log(`‚è≥ [${timestamp}] Throttling: Waiting ${Math.round(waitTime/1000)}s since last processing`);
            await this.wait(waitTime);
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏–π
        const appealElements = this.findAppealElements();
        console.log(`üìä [${timestamp}] Found ${appealElements.length} appeal elements on page`);

        if (appealElements.length === 0) {
            console.log('‚ö†Ô∏è No appeal elements found - check page structure or selectors');
            return;
        }

        let addedCount = 0;
        let processedCount = 0;
        let newAppealsFound = 0;
        const maxAppealsToProcess = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
        let appealsProcessedThisRound = 0;

        console.log(`üéØ [${timestamp}] Processing maximum ${maxAppealsToProcess} appeals to prevent system overload`);

        for (const element of appealElements) {
            processedCount++;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
            const appealInfo = this.extractAppealInfo(element);

            if (!appealInfo || !appealInfo.id) {
                console.log(`‚ö†Ô∏è Could not extract appeal info from element ${processedCount}`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–æ–µ –ª–∏ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ
            if (!this.isNewAppeal(element, appealInfo)) {
                console.log(`‚è≠Ô∏è Appeal ${appealInfo.id} is not new - skipping`);
                continue;
            }

            newAppealsFound++;
            console.log(`üÜï New appeal detected: ${appealInfo.id} (${newAppealsFound}/${appealElements.length})`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ —Ä–∞–∑
            if (appealsProcessedThisRound >= maxAppealsToProcess) {
                console.log(`‚ö†Ô∏è [${timestamp}] Reached maximum appeals limit (${maxAppealsToProcess}) for this round - remaining appeals will be processed in next cycle`);
                break;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if (window.unifiedCoordinator) {
                const added = await window.unifiedCoordinator.addToQueue(
                    appealInfo.id,
                    element,
                    source
                );

                if (added) {
                    addedCount++;
                    appealsProcessedThisRound++;
                    console.log(`‚úÖ Successfully added to queue: ${appealInfo.id} (${appealsProcessedThisRound}/${maxAppealsToProcess})`);

                    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
                    this.markElementAsQueued(element);

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏ –¥–ª—è –¥–∞—á–∏ –≤—Ä–µ–º–µ–Ω–∏ UI –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if (appealsProcessedThisRound < maxAppealsToProcess && newAppealsFound < appealElements.length) {
                        console.log(`‚è≥ [${timestamp}] Waiting 2s before processing next appeal...`);
                        await this.wait(2000);
                    }
                } else {
                    console.log(`‚è≠Ô∏è Appeal ${appealInfo.id} rejected by coordinator (likely duplicate)`);
                }
            } else {
                console.error('‚ùå UnifiedCoordinator not available - cannot add to queue');
                break;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.lastProcessingTime = Date.now();

        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log(`üìà [${timestamp}] Detection Summary:`);
        console.log(`   - Elements scanned: ${processedCount}`);
        console.log(`   - New appeals found: ${newAppealsFound}`);
        console.log(`   - Added to queue: ${addedCount}`);
        console.log(`   - Queue status: ${window.unifiedCoordinator ? window.unifiedCoordinator.getStats() : 'unavailable'}`);

        if (addedCount > 0) {
            console.log(`üéâ [${timestamp}] Successfully added ${addedCount} new appeals to processing queue`);
        } else if (newAppealsFound > 0) {
            console.log(`‚ÑπÔ∏è [${timestamp}] Found ${newAppealsFound} new appeals but none were added (likely duplicates)`);
        } else {
            console.log(`‚úîÔ∏è [${timestamp}] No new appeals detected - system operating normally`);
        }
    }
    
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
    findAppealElements() {
        return window.OmniChatUtils.findAppealElements();
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    extractAppealInfo(element) {
        const info = {
            id: window.OmniChatUtils.extractAppealId(element),
            hasTimer: false,
            timerSeconds: null
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä
        const text = window.OmniChatUtils.getTextContent(element);
        const timerMatch = text.match(/(\d+)\s*—Å–µ–∫/i);
        if (timerMatch) {
            const seconds = parseInt(timerMatch[1]);
            if (seconds < 60) {
                info.hasTimer = true;
                info.timerSeconds = seconds;
            }
        }

        return info;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ–≤–æ–µ –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    isNewAppeal(element, appealInfo) {
        // 1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä < 30 —Å–µ–∫—É–Ω–¥ - —Ç–æ—á–Ω–æ –Ω–æ–≤–æ–µ
        if (appealInfo.hasTimer && appealInfo.timerSeconds < 30) {
            console.log(`‚è∞ New appeal with timer: ${appealInfo.timerSeconds}s`);
            return true;
        }

        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const isNew = window.OmniChatUtils.isNewAppeal(element);
        if (isNew) {
            console.log('üî¥ New appeal detected by shared utilities');
        }

        return isNew;
    }
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–º–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    markElementAsQueued(element) {
        element.style.opacity = '0.7';
        element.style.borderLeft = '3px solid #4CAF50';
        element.dataset.omniQueued = 'true';
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            element.style.opacity = '';
            element.style.borderLeft = '';
        }, 10000);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞
    toggleAutoResponse() {
        this.autoResponseEnabled = !this.autoResponseEnabled;
        chrome.storage.local.set({ 
            autoResponseEnabled: this.autoResponseEnabled 
        });
        
        console.log('üîÑ Auto-response:', this.autoResponseEnabled ? 'ON' : 'OFF');
        return this.autoResponseEnabled;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStats() {
        const coordinatorStats = window.unifiedCoordinator ?
            window.unifiedCoordinator.getStats() : {};

        return {
            autoResponseEnabled: this.autoResponseEnabled,
            ...coordinatorStats
        };
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(() => {
    if (!window.simplifiedHandler) {
        window.simplifiedHandler = new SimplifiedAppealHandler();
        console.log('‚úÖ Simplified Appeal Handler ready (delayed start)');
        console.log('üíì Detection heartbeat will monitor system health every 35s');
    } else {
        console.log('‚ö†Ô∏è Simplified Appeal Handler already exists');
    }
}, 2000);

console.log('üîÑ SimplifiedHandler starting in 2 seconds...');
console.log('Commands:');
console.log('  simplifiedHandler.toggleAutoResponse() - Toggle auto-response');
console.log('  simplifiedHandler.checkForAppeals("manual") - Manual check');
console.log('  simplifiedHandler.verifyDetectionActivity() - Check system health');
console.log('  simplifiedHandler.getStats() - Get statistics');
console.log('  unifiedCoordinator.getStats() - Coordinator stats');
console.log('  unifiedCoordinator.reset() - Reset all data');