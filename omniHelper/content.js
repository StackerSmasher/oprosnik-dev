// ===== ENHANCED TRAFFIC ANALYZER FOR OMNICHAT =====
// Version 4.0 - Template-based auto-response system

// ===== –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–•–ê–ù–ò–ó–ú –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –û–ë–†–ê–©–ï–ù–ò–ô =====

class AppealIdentificationSystem {
    constructor() {
        // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è fingerprint -> appealId
        this.fingerprintMap = new Map();
        // –ö–∞—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.processedElements = new WeakSet();
        // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ID
        this.tempIdCounter = 0;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π fingerprint –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é: –ø–æ–∑–∏—Ü–∏—è –≤ DOM + —Ç–µ–∫—Å—Ç + –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
     */
    createAppealFingerprint(element) {
        const components = [];

        // 1. –ü–æ–∑–∏—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const parent = element.parentElement;
        if (parent) {
            const siblings = Array.from(parent.children);
            const position = siblings.indexOf(element);
            components.push(`pos:${position}`);
        }

        // 2. –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const nameElement = element.querySelector('.sc-hSWyVn.jLoqEI, [title]');
        const clientName = nameElement?.textContent?.trim() ||
                          nameElement?.getAttribute('title') ||
                          'unknown';
        components.push(`name:${clientName}`);

        // 3. –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageElement = element.querySelector('.sc-mYtaj.hfzSXm, [data-testid="collapsable-text"]');
        const messageText = messageElement?.textContent?.trim().substring(0, 50) || '';
        components.push(`msg:${messageText}`);

        // 4. –ù–∞–ª–∏—á–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        const timerElement = element.querySelector('.sc-cewOZc.ioQCCB span, [class*="timer"]');
        if (timerElement) {
            const timerText = timerElement.textContent || '';
            const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                components.push(`timer:${timerMatch[1]}`);
            }
        }

        // 5. –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
        const timeWindow = Math.floor(Date.now() / 30000);
        components.push(`time:${timeWindow}`);

        // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const fingerprint = this.hashString(components.join('|'));

        console.log('üîë Fingerprint created:', {
            fingerprint: fingerprint,
            components: components
        });

        return fingerprint;
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID
     */
    hashString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return Math.abs(hash).toString(36);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
     */
    extractOrGenerateAppealId(element) {
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
        if (this.processedElements.has(element)) {
            console.log('‚è≠Ô∏è Element already processed (WeakSet check)');
            return null;
        }

        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç –º–∞—Ä–∫–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (element.dataset.omniProcessed === 'true') {
            console.log('‚è≠Ô∏è Element already processed (data attribute check)');
            return null;
        }

        // –®–∞–≥ 3: –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è
        const realAppealId = this.findRealAppealId(element);

        if (realAppealId) {
            console.log('‚úÖ Found real appeal ID:', realAppealId);
            return realAppealId;
        }

        // –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º fingerprint –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
        const fingerprint = this.createAppealFingerprint(element);

        // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID –¥–ª—è —ç—Ç–æ–≥–æ fingerprint
        if (this.fingerprintMap.has(fingerprint)) {
            const existingId = this.fingerprintMap.get(fingerprint);
            console.log('üìã Using existing ID for fingerprint:', existingId);
            return existingId;
        }

        // –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
        const tempId = `TEMP_${Date.now()}_${++this.tempIdCounter}_${fingerprint}`;
        this.fingerprintMap.set(fingerprint, tempId);

        console.log('üÜï Generated temporary ID:', tempId);
        return tempId;
    }

    /**
     * –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
     */
    findRealAppealId(element) {
        const text = element.textContent || '';

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π
        const patterns = [
            /–û–±—Ä–∞—â–µ–Ω–∏–µ\s*‚Ññ\s*(\d{5,})/i,     // "–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456" (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)
            /–û–±—Ä–∞—â–µ–Ω–∏–µ[:\s#]+(\d{5,})/i,     // "–û–±—Ä–∞—â–µ–Ω–∏–µ: 123456"
            /Appeal[:\s#‚Ññ]+(\d{5,})/i,       // "Appeal: 123456"
            /#(\d{6,})/,                      // "#123456" (–º–∏–Ω–∏–º—É–º 6 —Ü–∏—Ñ—Ä –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
            /ID[:\s]+(\d{5,})/i,              // "ID: 123456"
            /‚Ññ\s*(\d{6,})/                   // "‚Ññ 123456" (–º–∏–Ω–∏–º—É–º 6 —Ü–∏—Ñ—Ä)
        ];

        for (const pattern of patterns) {
            const match = text.match(pattern);
            if (match) {
                return match[1];
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
        const dataAppealId = element.dataset?.appealId ||
                           element.dataset?.appealid ||
                           element.getAttribute('data-appeal-id');

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID (—á–∏—Å–ª–æ–≤–æ–π –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π)
        if (dataAppealId && /^\d{5,}$/.test(dataAppealId)) {
            return dataAppealId;
        }

        return null;
    }

    /**
     * –ü–æ–º–µ—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
     */
    markAsProcessed(element, appealId) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ WeakSet
        this.processedElements.add(element);

        // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        element.dataset.omniProcessed = 'true';
        element.dataset.omniProcessedId = appealId;
        element.dataset.omniProcessedTime = Date.now();

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
        element.style.opacity = '0.7';

        console.log('‚úÖ Element marked as processed:', appealId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º (–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º)
     */
    isNewUnprocessedAppeal(element) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (this.processedElements.has(element) ||
            element.dataset.omniProcessed === 'true') {
            return false;
        }

        // 2. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–∏ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        const appealId = this.extractOrGenerateAppealId(element);
        if (appealId && window.omniAnalyzer?.isCurrentlyActiveAppeal?.(appealId)) {
            console.log('üö´ Appeal is currently active, not new:', appealId);
            return false;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        const timerCheck = this.checkTimer(element);

        // –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–µ—Ä–∞, –Ω–æ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if (timerCheck.hasTimer && timerCheck.seconds < 30) { // –£–º–µ–Ω—å—à–∏–ª–∏ –ø–æ—Ä–æ–≥ –¥–æ 30 —Å–µ–∫—É–Ω–¥
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ badge
            const hasBadge = !!element.querySelector('[data-testid="badge"], [data-testid="dot"], .new');

            if (hasBadge) {
                console.log('üî• New appeal with timer AND badge:', timerCheck.seconds, 'seconds');
                return true;
            }
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–æ–≤–∏–∑–Ω—ã
        const hasNewIndicators = this.checkNewIndicators(element);

        return hasNewIndicators;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
     */
    checkTimer(element) {
        const result = { hasTimer: false, seconds: null };

        // –ò—â–µ–º —Ç–∞–π–º–µ—Ä –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        const timerContainer = element.querySelector('.sc-cewOZc.ioQCCB span, [class*="timer"]');

        if (timerContainer) {
            const timerText = timerContainer.textContent || '';
            const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                result.hasTimer = true;
                result.seconds = parseInt(timerMatch[1]);
            }
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ
        if (!result.hasTimer) {
            const text = element.textContent || '';
            const timerMatch = text.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                const seconds = parseInt(timerMatch[1]);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ç–∞–π–º–µ—Ä (–Ω–µ –±–æ–ª—å—à–µ 1000 —Å–µ–∫—É–Ω–¥)
                if (seconds <= 1000) {
                    result.hasTimer = true;
                    result.seconds = seconds;
                }
            }
        }

        return result;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
     */
    checkNewIndicators(element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ badge/dot
        const hasBadge = !!element.querySelector('[data-testid="badge"], [data-testid="dot"], .badge, .new');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        const classList = element.className || '';
        const hasNewClass = classList.includes('unread') ||
                           classList.includes('new') ||
                           classList.includes('pending');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
        const fontWeight = window.getComputedStyle(element).fontWeight;
        const isBold = fontWeight === 'bold' || parseInt(fontWeight) >= 600;

        return hasBadge || hasNewClass || isBold;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ fingerprints (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
     */
    cleanupOldFingerprints() {
        const oneHourAgo = Date.now() - 60 * 60 * 1000;

        // –û—á–∏—â–∞–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã —É —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('[data-omni-processed="true"]').forEach(element => {
            const processedTime = parseInt(element.dataset.omniProcessedTime || '0');
            if (processedTime < oneHourAgo) {
                delete element.dataset.omniProcessed;
                delete element.dataset.omniProcessedId;
                delete element.dataset.omniProcessedTime;
                element.style.opacity = '';
            }
        });

        // –û—á–∏—â–∞–µ–º fingerprint map (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
        if (this.fingerprintMap.size > 100) {
            const entriesToKeep = 50;
            const entries = Array.from(this.fingerprintMap.entries());
            this.fingerprintMap.clear();
            entries.slice(-entriesToKeep).forEach(([key, value]) => {
                this.fingerprintMap.set(key, value);
            });
        }

        console.log('üßπ Cleanup completed');
    }
}

class OmniChatTrafficAnalyzer {
    constructor() {
        this.dialogIds = new Map();
        this.appealIds = new Map();
        this.networkLog = [];
        this.autoResponseEnabled = true;
        this.debugMode = true;
        
        // Queue system for handling multiple appeals
        this.appealQueue = [];
        this.isProcessingQueue = false;
        this.processedAppeals = new Set(); // Track processed appeals
        this.processedTimestamps = new Map(); // Track when appeals were processed
        
        // –ù–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        this.sessionProcessedCount = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        this.currentlyProcessingAppeal = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        
        // Debouncing mechanism
        this.clickDebounceMap = new Map(); // Track recent clicks to prevent duplicates
        this.debounceDelay = 1000; // 1 second debounce
        
        // Template response configuration
        this.templateConfig = {
            responseDelay: 2000, // Delay before processing
            clickDelay: 500, // Delay between clicks
            templateText: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
            templateTitle: '1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            maxRetries: 3,
            cooldownPeriod: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞ - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        };
        
        // Improved synchronization with AppealMonitor
        this.appealMonitorSync = {
            lastCheckTime: 0,
            pendingCheck: false,
            checkDelay: 2000 // 2 seconds delay for batching
        };

        // Initialize the new appeal identification system
        this.appealIdSystem = new AppealIdentificationSystem();

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Å–µ—Å—Å–∏–∏
        this.greetedAppeals = new Map(); // appealId -> timestamp

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GreetingTracker
        this.greetingTracker = window.greetingTracker || new GreetingTracker();

        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ localStorage
        this.greetingLock = {
            acquire: async (appealId) => {
                const lockKey = `greeting_lock_${appealId}`;
                const lockValue = Date.now();

                // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                localStorage.setItem(lockKey, lockValue);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 50ms, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—à–∞
                await this.wait(50);
                const currentLock = localStorage.getItem(lockKey);

                if (currentLock == lockValue) {
                    console.log('üîí Lock acquired for:', appealId);
                    return true;
                }

                console.log('üîí Lock denied for:', appealId);
                return false;
            },

            release: (appealId) => {
                const lockKey = `greeting_lock_${appealId}`;
                localStorage.removeItem(lockKey);
                console.log('üîì Lock released for:', appealId);
            }
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ storage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        chrome.storage.local.get(['greetedAppeals'], (result) => {
            if (result.greetedAppeals) {
                Object.entries(result.greetedAppeals).forEach(([id, timestamp]) => {
                    this.greetedAppeals.set(id, timestamp);
                });
            }
        });

        // Start periodic cleanup
        setInterval(() => {
            this.appealIdSystem.cleanupOldFingerprints();
        }, 30 * 60 * 1000); // Every 30 minutes

        this.init();
    }

    init() {
        console.log('üöÄ OmniChat Traffic Analyzer v4.0 initialized');
        console.log('üìç Current URL:', window.location.href);
        
        this.loadSettings();
        this.injectMainWorldScript();
        this.setupMessageListener();
        this.setupDOMObserver();
        this.setupAppealDetection();
        this.startPeriodicSync();
        this.startPeriodicAppealCheck(); // –ù–æ–≤–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        this.startPeriodicCleanup(); // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.exposeDebugInterface();
    }

    // ===== APPEAL DETECTION SYSTEM =====
    setupAppealDetection() {
        console.log('üëÅÔ∏è Setting up appeal detection system...');
        
        // Monitor for new appeal elements in the UI
        this.observeAppealList();
        
        // Check for existing appeals on page load
        setTimeout(() => this.checkForExistingAppeals(), 2000);
    }

    observeAppealList() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            this.checkForNewAppeal(node);
                        }
                    });
                }
            });
        });

        // Find appeal list container
        const findAndObserve = () => {
            const appealContainers = [
                '.appeals-list',
                '.chat-list',
                '.dialog-list',
                '.conversation-list',
                '[data-testid="appeals-list"]',
                '.sidebar-content',
                '.left-panel',
                '.chats-container'
            ];

            for (const selector of appealContainers) {
                const container = document.querySelector(selector);
                if (container) {
                    observer.observe(container, {
                        childList: true,
                        subtree: true
                    });
                    console.log('‚úÖ Observing appeal container:', selector);
                    return true;
                }
            }
            return false;
        };

        if (!findAndObserve()) {
            // Retry if container not found immediately
            setTimeout(() => findAndObserve(), 2000);
        }
    }

    isCurrentlyActiveAppeal(appealId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ —ç—Ç–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏

        // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL
        const currentUrl = window.location.href;
        if (currentUrl.includes(appealId)) {
            console.log('‚ö†Ô∏è Appeal is currently active (URL check):', appealId);
            return true;
        }

        // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        const activeElements = document.querySelectorAll('.active, .selected, [aria-selected="true"]');
        for (const element of activeElements) {
            const elementText = element.textContent || '';
            if (elementText.includes(appealId)) {
                console.log('‚ö†Ô∏è Appeal is currently active (DOM check):', appealId);
                return true;
            }
        }

        // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
        const chatHeader = document.querySelector('.chat-header, .conversation-header, [data-testid="chat-header"]');
        if (chatHeader) {
            const headerText = chatHeader.textContent || '';
            if (headerText.includes(appealId)) {
                console.log('‚ö†Ô∏è Appeal is currently active (header check):', appealId);
                return true;
            }
        }

        // –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const messageInput = document.querySelector('textarea') ||
                            document.querySelector('[contenteditable="true"]');
        if (messageInput) {
            const currentText = messageInput.value || messageInput.textContent || '';
            if (currentText.includes('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É')) {
                console.log('‚ö†Ô∏è Template already in input field');
                return true;
            }
        }

        return false;
    }

    checkForNewAppeal(element) {
        // Enhanced appeal detection using the new identification system

        // Step 1: Find appeal elements using various selectors
        const appealIndicators = [
            '[data-appeal-id]',
            '[data-appealid]',
            '.appeal-item',
            '.chat-item',
            '.dialog-item',
            '.conversation-item',
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è OmniChat —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            '[data-testid*="appeal"]',
            '[data-testid*="chat"]',
            '[data-testid*="dialog"]'
        ];

        let appealElement = null;

        for (const selector of appealIndicators) {
            appealElement = element.matches?.(selector) ? element : element.querySelector?.(selector);
            if (appealElement) break;
        }

        if (!appealElement) return;

        // Step 2: Use the new appeal identification system
        const appealId = this.appealIdSystem.extractOrGenerateAppealId(appealElement);

        if (!appealId) {
            console.log('‚è≠Ô∏è Element already processed or invalid');
            return;
        }

        // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
        if (this.isCurrentlyActiveAppeal(appealId)) {
            console.log('‚è≠Ô∏è Appeal is currently active, skipping:', appealId);
            this.appealIdSystem.markAsProcessed(appealElement, appealId);
            return;
        }

        // Step 3: Check if this is a new unprocessed appeal
        if (!this.appealIdSystem.isNewUnprocessedAppeal(appealElement)) {
            console.log('‚è≠Ô∏è Appeal not new or already processed:', appealId);
            return;
        }

        // Step 4: Check existing system deduplication (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        if (this.processedAppeals.has(appealId)) {
            console.log('‚è≠Ô∏è Appeal already in processed set:', appealId);
            return;
        }

        // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: GreetingTracker
        if (this.greetingTracker && this.greetingTracker.wasGreeted(element, appealId)) {
            console.log('‚è≠Ô∏è Appeal already greeted (GreetingTracker):', appealId);
            this.appealIdSystem.markAsProcessed(appealElement, appealId);
            return;
        }

        // Step 4.5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        const processedTime = this.processedTimestamps.get(appealId);
        if (processedTime && Date.now() - processedTime < 60000) { // 60 —Å–µ–∫—É–Ω–¥
            console.log('‚è≠Ô∏è Appeal in cooldown period:', appealId);
            return;
        }

        // Step 5: Check if already in queue
        if (this.appealQueue.some(item => item.appealId === appealId)) {
            console.log('‚è≠Ô∏è Appeal already in queue:', appealId);
            return;
        }

        console.log('üÜï New unprocessed appeal detected:', appealId);
        console.log('  üìù Appeal details:');
        console.log('    - Element classes:', appealElement.className);
        console.log('    - Element text preview:', (appealElement.textContent || '').substring(0, 100));
        console.log('    - Has timer:', !!appealElement.querySelector('[class*="timer"]') || /\d+\s*—Å–µ–∫/i.test(appealElement.textContent || ''));
        console.log('    - Auto-response enabled:', this.autoResponseEnabled);

        // Step 6: Mark element as processed immediately
        this.appealIdSystem.markAsProcessed(appealElement, appealId);

        // Step 7: Add to queue if auto-response is enabled
        if (this.autoResponseEnabled) {
            console.log('üì§ Adding appeal to queue for greeting processing:', appealId);
            const success = this.addAppealToQueue({
                appealId: appealId,
                element: appealElement,
                timestamp: Date.now(),
                source: 'DOM_observer',
                type: 'greeting' // –ú–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            });

            if (success) {
                console.log('‚úÖ Successfully added greeting to queue:', appealId);
                console.log('  üìä Current queue length:', this.appealQueue.length);
            } else {
                console.log('‚ùå Failed to add greeting to queue:', appealId);
                console.log('  ‚ö†Ô∏è This may prevent greeting from being sent');
            }
        } else {
            console.log('üö´ Auto-response disabled, skipping:', appealId);
        }
    }

    extractAppealIdFromElement(element) {
        // Try various methods to extract appeal ID

        // Method 1: Data attributes (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö ID)
        const dataAppealId = element.dataset?.appealId ||
                           element.dataset?.appealid ||
                           element.getAttribute('data-appeal-id');
        if (dataAppealId) return dataAppealId;

        // Method 2: Text content patterns (–ü–†–ò–û–†–ò–¢–ï–¢ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–π)
        const text = element.textContent || '';
        const patterns = [
            /–û–±—Ä–∞—â–µ–Ω–∏–µ\s*‚Ññ\s*(\d+)/i,        // "–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456"
            /–û–±—Ä–∞—â–µ–Ω–∏–µ[:\s#]+(\d+)/i,        // "–û–±—Ä–∞—â–µ–Ω–∏–µ: 123456" –∏–ª–∏ "–û–±—Ä–∞—â–µ–Ω–∏–µ #123456"
            /Appeal[:\s#‚Ññ]+(\d+)/i,          // "Appeal: 123456" –∏–ª–∏ "Appeal ‚Ññ 123456"
            /#(\d{5,})/,                     // "#123456" (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)
            /ID[:\s]+(\d+)/i,                // "ID: 123456"
            /‚Ññ\s*(\d{5,})/                   // "‚Ññ 123456" (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)
        ];

        for (const pattern of patterns) {
            const match = text.match(pattern);
            if (match) return match[1];
        }

        // Method 3: ID attribute
        if (element.id && element.id.includes('appeal')) {
            const idMatch = element.id.match(/\d+/);
            if (idMatch) return idMatch[0];
        }

        // Method 4: –ü–æ–∏—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        const childElements = element.querySelectorAll('*');
        for (const child of childElements) {
            const childText = child.textContent || '';
            for (const pattern of patterns) {
                const match = childText.match(pattern);
                if (match) return match[1];
            }
        }

        // Method 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–∏–∑–Ω—ã (–Ω–µ –¥–ª—è ID)
        // –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
        const timerContainer = element.querySelector('.sc-cewOZc.ioQCCB span') ||
                              element.querySelector('div[class*="sc-cewOZc"] span');

        if (timerContainer) {
            const timerText = timerContainer.textContent || '';
            const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                const seconds = parseInt(timerMatch[1]);
                if (seconds < 60) {
                    console.log('‚è∞ Found timer in appeal element:', seconds, 'seconds - this will be marked as new');
                }
            }
        }

        // Method 6: –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Å—É—Ä—Å - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ ID –æ–±—Ä–∞—â–µ–Ω–∏–π
        // –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫ —Ü–∏—Ñ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ü–µ–ø–ª—è—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –ø—Ä–æ—á–µ–µ

        return null;
    }

    isNewAppeal(element) {
        // Check indicators that this is a new/unread appeal

        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä –ú–ï–ù–¨–®–ï 60 —Å–µ–∫—É–Ω–¥ - —ç—Ç–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)

        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–π–º–µ—Ä–∞
        const timerContainer = element.querySelector('.sc-cewOZc.ioQCCB span') ||
                              element.querySelector('div[class*="sc-cewOZc"] span') ||
                              element.querySelector('span:contains("—Å–µ–∫")');

        if (timerContainer) {
            const timerText = timerContainer.textContent || '';
            const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                const seconds = parseInt(timerMatch[1]);
                if (seconds < 60) {
                    console.log('üî• Content.js: Found timer in specific structure - marking as new:', seconds, 'seconds');
                    return true;
                }
            }
        }

        // –ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
        const text = element.textContent || '';
        const timerPatterns = [
            /(\d+)\s*—Å–µ–∫/i,                 // "45 —Å–µ–∫", "792 —Å–µ–∫"
            /(\d{1,2})\s*—Å\b/i,             // "45—Å", "59 —Å" (–Ω–æ –Ω–µ "792—Å")
            /(\d{1,2})\s*sec/i,             // "45sec"
            /0:(\d{2})/,                    // "0:45"
        ];

        for (const pattern of timerPatterns) {
            const match = text.match(pattern);
            if (match) {
                const seconds = parseInt(match[1]);
                if (seconds < 60) {
                    console.log('üî• Content.js: Found timer in text - marking as new:', seconds, 'seconds');
                    return true;
                }
            }
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: Check for unread indicators
        const unreadIndicators = [
            '.unread',
            '.new',
            '.badge',
            '.notification',
            '[data-unread="true"]',
            '[data-status="new"]'
        ];

        for (const selector of unreadIndicators) {
            if (element.querySelector(selector) || element.matches(selector)) {
                return true;
            }
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 3: Check for specific classes
        const classList = element.className || '';
        if (classList.includes('unread') ||
            classList.includes('new') ||
            classList.includes('pending')) {
            return true;
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 4: Check for bold text (often indicates unread)
        const fontWeight = window.getComputedStyle(element).fontWeight;
        if (fontWeight === 'bold' || parseInt(fontWeight) >= 600) {
            return true;
        }

        return false;
    }

    checkForExistingAppeals() {
        console.log('üîç Checking for existing appeals...');
        
        let appeals = [];
        
        // –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AppealMonitor (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (window.appealMonitor && window.appealMonitor.isMonitoring) {
            console.log('üîç Using AppealMonitor data...');
            
            try {
                const sidebarAppeals = window.appealMonitor.getSidebarAppeals();
                console.log(`üìä AppealMonitor found ${sidebarAppeals.length} sidebar appeals`);
                
                sidebarAppeals.forEach(appealInfo => {
                    if (appealInfo.status === 'new' && 
                        appealInfo.id && 
                        this.isAppealEligibleForProcessing(appealInfo.id)) {
                        
                        console.log('‚úÖ AppealMonitor appeal eligible:', appealInfo.id);
                        appeals.push({
                            appealId: appealInfo.id,
                            element: appealInfo.element,
                            source: 'appealMonitor',
                            name: appealInfo.name,
                            text: appealInfo.text
                        });
                    }
                });
            } catch (error) {
                console.log('‚ö†Ô∏è Error getting AppealMonitor data:', error.message);
            }
        }
        
        // –ú–µ—Ç–æ–¥ 2: –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
        console.log('üîç Performing built-in appeal scan...');
        
        const appealSelectors = [
            '[data-testid="appeal-preview"]',  // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è OmniChat
            '[data-appeal-id]',
            '.appeal-item',
            '.chat-item:not(.read)',
            '.chat-item', // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã, –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            '.dialog-item.unread',
            '.dialog-item', // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            '.conversation-item.new',
            '.conversation-item', // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–±—â–∏—Ö —á–∞—Ç–æ–≤
            '[class*="chat"]',
            '[class*="dialog"]',
            '[class*="conversation"]',
            '[class*="appeal"]'
        ];

        for (const selector of appealSelectors) {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
                const appealId = this.extractAppealIdFromElement(el);
                if (appealId && this.isAppealEligibleForProcessing(appealId)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                    const alreadyFound = appeals.some(a => a.appealId === appealId);
                    
                    // –°–º—è–≥—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–µ —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω–æ –Ω–æ–≤—ã–µ
                    if (!alreadyFound) {
                        const isNew = this.isNewAppeal(el);
                        console.log(`üîç Built-in scan found appeal: ${appealId} (new: ${isNew})`);
                        appeals.push({
                            appealId: appealId,
                            element: el,
                            source: 'builtInScan',
                            isNewByIndicators: isNew
                        });
                    }
                }
            });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫–∞–Ω –¥–ª—è –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–æ–≤
        if (appeals.length === 0) {
            console.log('üîç No appeals found by standard selectors, trying broader search...');
            const broadSelectors = [
                'div[class*="sc-"]', // –û–±—â–∏–µ styled-components –∫–ª–∞—Å—Å—ã
                'div[data-testid]',  // –õ—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-testid
                'li', // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–æ–≤
                'article' // –û–±—â–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            ];

            for (const selector of broadSelectors) {
                const elements = document.querySelectorAll(selector);
                for (const el of elements) {
                    const appealId = this.extractAppealIdFromElement(el);
                    if (appealId && !appeals.some(a => a.appealId === appealId) && this.isAppealEligibleForProcessing(appealId)) {
                        console.log(`üîé Broad search found potential appeal: ${appealId}`);
                        appeals.push({
                            appealId: appealId,
                            element: el,
                            source: 'broadSearch',
                            isNewByIndicators: false
                        });
                        if (appeals.length >= 10) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    }
                }
                if (appeals.length > 0) break;
            }
        }

        console.log(`üìä Total found ${appeals.length} unprocessed appeals`);

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        appeals.forEach((appeal, index) => {
            const newFlag = appeal.isNewByIndicators ? ' [NEW]' : '';
            console.log(`  ${index + 1}. ${appeal.appealId} (${appeal.source})${newFlag} ${appeal.name ? '- ' + appeal.name : ''}`);
        });
        
        if (appeals.length > 0 && this.autoResponseEnabled) {
            appeals.forEach(appeal => {
                const success = this.addAppealToQueue({
                    ...appeal,
                    timestamp: Date.now()
                });
                
                if (success) {
                    console.log('‚úÖ Added appeal to queue:', appeal.appealId);
                } else {
                    console.log('‚ö†Ô∏è Appeal rejected by queue:', appeal.appealId);
                }
            });
        } else if (!this.autoResponseEnabled) {
            console.log('üö´ Auto-response disabled, appeals not queued');
        }
    }

    // ===== DEDUPLICATION AND UNIQUENESS =====
    isAppealEligibleForProcessing(appealId) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const normalizedId = appealId.toString().replace(/^#/, '').trim();

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
        if (this.processedAppeals.has(normalizedId)) {
            console.log('‚è≠Ô∏è Appeal already processed (memory):', normalizedId);
            return false;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ ID (–∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–∏–ø–∞ 619883264600/619883264601)
        const baseId = normalizedId.substring(0, normalizedId.length - 1); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
        for (const processedId of this.processedAppeals) {
            if (processedId.startsWith(baseId) && Math.abs(processedId.length - normalizedId.length) <= 1) {
                console.log('‚è≠Ô∏è Similar appeal already processed:', processedId, 'vs', normalizedId);
                return false;
            }
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å –∫—É–ª–¥–∞—É–Ω–æ–º –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π (24 —á–∞—Å–∞)
        const processedTime = this.processedTimestamps.get(normalizedId);
        if (processedTime) {
            const timeSinceProcessed = Date.now() - processedTime;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º 24-—á–∞—Å–æ–≤–æ–π –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –Ω–æ 60—Å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const cooldownPeriod = this.templateConfig.cooldownPeriod || 60 * 1000;
            
            if (timeSinceProcessed < cooldownPeriod) {
                const timeAgo = cooldownPeriod > 3600000 ?
                    Math.round(timeSinceProcessed / 3600000) + 'h' :
                    Math.round(timeSinceProcessed / 1000) + 's';
                console.log(`‚è∞ Appeal processed ${timeAgo} ago, still in cooldown:`, normalizedId);
                return false;
            } else {
                // Cooldown –∏—Å—Ç–µ–∫, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                console.log(`‚úÖ Cooldown expired for appeal:`, normalizedId);
            }
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
        const inQueue = this.appealQueue.some(a => a.appealId === normalizedId || a.appealId === appealId);
        if (inQueue) {
            console.log('‚è≥ Appeal already in queue:', normalizedId);
            return false;
        }
        
        return true;
    }

    // ===== APPEAL OPENING =====
    async openNewAppeal(appealId, element) {
        console.log('üö™ Opening new appeal:', appealId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ
        if (this.isCurrentlyActiveAppeal(appealId)) {
            console.log('‚ö†Ô∏è Appeal already open');
            return false;
        }

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è
        if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
            await this.wait(300);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
            element.click();

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤–Ω—É—Ç—Ä–∏
            const clickable = element.querySelector('a, button, [role="button"]');
            if (clickable) {
                clickable.click();
            }

            console.log('‚úÖ Clicked on appeal element');

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await this.wait(1000);

            return true;
        }

        return false;
    }

    // ===== QUEUE MANAGEMENT =====
    addAppealToQueue(appeal) {
        // –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≥–ª–æ–±–∞–ª—å–Ω—ã–π lock –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if (window.globalQueueLock && Date.now() - window.globalQueueLock < 5000) {
            console.log('‚è≥ Global lock active (5s), skipping add to queue');
            return false;
        }
        window.globalQueueLock = Date.now();  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å lock
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        if (!appeal.appealId) {
            console.log('‚ùå No appeal ID provided');
            return false;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–π—Ç–µ ID –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        const normalizedId = appeal.appealId.toString().replace(/^#/, '').trim();
        if (normalizedId !== appeal.appealId) {
            console.log('üîÑ Normalized ID from', appeal.appealId, 'to', normalizedId);
            appeal.appealId = normalizedId;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if (!this.isAppealEligibleForProcessing(appeal.appealId)) {
            console.log('üôÖ Appeal not eligible:', appeal.appealId);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ (–¥–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        const alreadyInQueue = this.appealQueue.some(item => item.appealId === appeal.appealId);
        if (alreadyInQueue) {
            console.log('‚ö†Ô∏è Appeal already in queue, skipping:', appeal.appealId);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏ –º—ã –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        if (this.currentlyProcessingAppeal === appeal.appealId) {
            console.log('‚ö†Ô∏è Appeal currently being processed, skipping:', appeal.appealId);
            return false;
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        const recentProcessing = this.processedTimestamps.get(appeal.appealId);
        if (recentProcessing && Date.now() - recentProcessing < 30000) {
            console.log('üö´ Appeal was processed recently (< 30s ago), preventing duplicate:', appeal.appealId);
            return false;
        }

        console.log('‚ûï Adding appeal to queue:', appeal.appealId);

        // –ù–û–í–û–ï: –ï—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if (appeal.element && this.appealQueue.length === 0 && !this.isProcessingQueue) {
            this.openNewAppeal(appeal.appealId, appeal.element).then(opened => {
                if (opened) {
                    console.log('‚úÖ New appeal opened automatically');
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        appeal.addedToQueueAt = Date.now();
        this.appealQueue.push(appeal);
        
        console.log(`üìà Queue size: ${this.appealQueue.length}`);
        
        // Start processing if not already running
        if (!this.isProcessingQueue) {
            console.log('üöÄ Starting queue processing...');
            setTimeout(() => this.processQueue(), 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        } else {
            console.log('üîÑ Queue processing already running');
        }
        
        return true;
    }

    async processQueue() {
        if (this.appealQueue.length === 0) {
            this.isProcessingQueue = false;
            console.log('‚úÖ Queue processing complete');
            return;
        }

        this.isProcessingQueue = true;
        const appeal = this.appealQueue.shift();
        
        // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        this.currentlyProcessingAppeal = appeal.appealId;
        
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if (this.processedAppeals.has(appeal.appealId)) {
            console.log('‚ö†Ô∏è Appeal was processed while in queue, skipping:', appeal.appealId);
            this.currentlyProcessingAppeal = null;
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
            setTimeout(() => this.processQueue(), 100);
            return;
        }
        
        console.log('‚öôÔ∏è Processing appeal:', appeal.appealId);
        console.log(`   Queue position: 1/${this.appealQueue.length + 1}`);
        console.log(`   Wait time: ${Math.round((Date.now() - appeal.addedToQueueAt) / 1000)}s`);

        // –û—á–∏—â–∞–µ–º lock —Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –º–æ–≥–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è
        window.globalQueueLock = null;

        try {
            await this.processAppeal(appeal);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤ processAppeal (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
            const normalizedSuccessId = appeal.appealId.toString().replace(/^#/, '').trim();
            if (!this.processedAppeals.has(normalizedSuccessId)) {
                console.log('‚ÑπÔ∏è Marking appeal as processed after successful processing');
                this.processedAppeals.add(normalizedSuccessId);
                this.processedTimestamps.set(normalizedSuccessId, Date.now());
                await this.saveProcessedAppealImmediately(normalizedSuccessId);
            }
            
            console.log('‚úÖ Successfully processed appeal:', appeal.appealId);

            // –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–º–µ—á–∞–µ–º –≤ GreetingTracker
            if (this.greetingTracker && appeal.element) {
                await this.greetingTracker.markAsGreeted(
                    appeal.element,
                    appeal.appealId,
                    this.templateConfig.templateText
                );
            }

            this.sessionProcessedCount++;
            
        } catch (error) {
            console.error('‚ùå Error processing appeal:', error.message);

            // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ü–û–í–¢–û–†–Ø–ï–ú –ü–†–ò –û–®–ò–ë–ö–ê–•
            // –ú–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
            console.log('‚ùå Appeal processing failed, marking as processed to prevent spam');
            const normalizedErrorId = appeal.appealId.toString().replace(/^#/, '').trim();
            this.processedAppeals.add(normalizedErrorId);
            this.processedTimestamps.set(normalizedErrorId, Date.now());
            await this.saveProcessedAppealImmediately(normalizedErrorId);
        } finally {
            // –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            this.greetingLock.release(appeal.appealId);
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        this.currentlyProcessingAppeal = null;

        // Wait before processing next
        console.log(`‚è≥ Waiting ${this.templateConfig.responseDelay}ms before next...`);
        await this.wait(this.templateConfig.responseDelay);
        
        // Continue processing queue recursively
        setTimeout(() => this.processQueue(), 100);
    }

    // ===== TEMPLATE-BASED RESPONSE SYSTEM =====
    async processAppeal(appeal) {
    const startTime = Date.now();
    const activity = {
        appealId: appeal.appealId,
        timestamp: startTime,
        action: 'process'
    };

    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GreetingTracker
    if (this.greetingTracker && appeal.element) {
        if (this.greetingTracker.wasGreeted(appeal.element, appeal.appealId)) {
            console.log('üö´ Appeal already greeted (GreetingTracker check):', appeal.appealId);
            return;
        }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    const lockAcquired = await this.greetingLock.acquire(appeal.appealId);
    if (!lockAcquired) {
        console.log('üö´ Could not acquire lock, another process is handling:', appeal.appealId);
        return;
    }

    try {
        // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if (this.greetingTracker && appeal.element) {
            if (this.greetingTracker.wasGreeted(appeal.element, appeal.appealId)) {
                console.log('üö´ Appeal greeted while waiting for lock:', appeal.appealId);
                return;
            }
        }

        // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        // (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–æ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –ø–æ–ø–∞–ª–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
        if (this.processedAppeals.has(appeal.appealId)) {
            console.log('‚ö†Ô∏è Appeal already processed, skipping:', appeal.appealId);
            return;
        }

        // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ë—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (this.greetedAppeals.has(appeal.appealId)) {
            const greetedTime = this.greetedAppeals.get(appeal.appealId);
            const timeSinceGreeted = Date.now() - greetedTime;
            const oneHour = 60 * 60 * 1000;

            if (timeSinceGreeted < oneHour) {
                console.log('‚ö†Ô∏è Greeting already sent to this appeal:', appeal.appealId);
                console.log(`   Sent ${Math.round(timeSinceGreeted / 1000)}s ago`);
                return;
            }
        }

        console.log('ü§ñ Starting template response for appeal:', appeal.appealId);
        
        // Step 0: Comprehensive pre-send validation
        console.log('üîç Step 0: Running pre-send validation checks...');
        
        if (!window.location.href.includes('omnichat.rt.ru')) {
            throw new Error('Not on OmniChat page');
        }
        
        // Validate appeal data
        if (!appeal.appealId || appeal.appealId.trim().length === 0) {
            throw new Error('Invalid appeal ID');
        }
        
        // Check if UI is ready - improved selectors
        const requiredElements = {
            messageInput: document.querySelector([
                'textarea[placeholder*="–í–≤–µ–¥–∏—Ç–µ"]',
                'input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]',
                'div[contenteditable="true"]',
                'textarea[data-testid*="input"]',
                'input[data-testid*="input"]',
                'textarea[class*="input"]',
                'input[class*="input"]',
                // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è OmniChat
                'textarea',
                'input[type="text"]',
                '[contenteditable="true"]'
            ].join(', ')),
            templateButton: document.querySelector([
                'button[data-testid="choose-templates"]',
                'button[title*="—à–∞–±–ª–æ–Ω"]',
                'button[data-testid*="template"]',
                'button[class*="template"]',
                // –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö –∫–Ω–æ–ø–æ–∫ —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
                'button[type="button"]'
            ].join(', '))
        };
        
        if (!requiredElements.messageInput) {
            console.log('‚ö†Ô∏è Message input field not found. Available inputs:');
            const allInputs = document.querySelectorAll('input, textarea, [contenteditable]');
            allInputs.forEach((input, i) => {
                console.log(`  ${i+1}. ${input.tagName} - placeholder: "${input.placeholder || 'none'}" - class: "${input.className}"`);
            });
            throw new Error('Message input field not found - UI not ready');
        }

        if (!requiredElements.templateButton) {
            console.log('‚ö†Ô∏è Template button not found. Available buttons:');
            const allButtons = document.querySelectorAll('button');
            allButtons.forEach((btn, i) => {
                if (i < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    console.log(`  ${i+1}. title: "${btn.title || 'none'}" - class: "${btn.className}" - text: "${btn.textContent?.substring(0, 20)}"`);
                }
            });
            throw new Error('Template button not found - UI not ready');
        }
        
        // Check if we're in the right conversation context
        const conversationIndicators = document.querySelectorAll(
            '[data-testid*="conversation"], .conversation-title, .chat-header, [class*="chat"], [class*="message"], [data-testid*="chat"]'
        );
        if (conversationIndicators.length === 0) {
            console.log('‚ö†Ô∏è No conversation context indicators found');
            console.log('üîç Available UI elements:');
            const elements = document.querySelectorAll('[data-testid], [class*="sc-"]');
            for (let i = 0; i < Math.min(elements.length, 5); i++) {
                const el = elements[i];
                console.log(`  ${i+1}. ${el.tagName} - testid: "${el.dataset.testid || 'none'}" - class: "${el.className}"`);
            }
        }
        
        console.log('‚úÖ Pre-send validation passed');
        
        // Step 1: –í—ã–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç)
        if (appeal.element) {
            console.log('üëÜ Step 1: Selecting appeal element...');
            const selected = await this.selectAppeal(appeal);
            if (!selected) {
                console.log('‚ö†Ô∏è Could not select appeal, continuing anyway...');
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ UI —á–∞—Ç–∞
            console.log('üîÑ Waiting for chat UI to load...');
            await this.wait(Math.max(this.templateConfig.clickDelay, 2000)); // –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            await this.waitForChatUI();
        }
        
        // Step 2: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤
        console.log('üìã Step 2: Opening template selector...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤
        let templateButton = document.querySelector('button[data-testid="choose-templates"]');
        
        if (!templateButton) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            console.log('‚ö†Ô∏è Template button not found by data-testid, trying alternative selectors...');
            templateButton = document.querySelector('button[title="–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω"]') ||
                           document.querySelector('button[title*="—à–∞–±–ª–æ–Ω"]');
        }
        
        if (!templateButton) {
            throw new Error('Template button not found');
        }
        
        console.log('‚úÖ Found template button, clicking...');
        templateButton.click();
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        await this.wait(800);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
        const modal = document.querySelector('div[data-testid="modal"]');
        if (!modal) {
            console.log('‚ö†Ô∏è Modal not found, retrying...');
            templateButton.click();
            await this.wait(1000);
            
            const modalRetry = document.querySelector('div[data-testid="modal"]');
            if (!modalRetry) {
                throw new Error('Failed to open template modal');
            }
        }
        
        console.log('‚úÖ Template modal opened');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        await this.wait(500);
        
        // Step 3: –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
        console.log('‚úÖ Step 3: Selecting template...');
        
        const templates = document.querySelectorAll('div[data-testid="reply-template"]');
        console.log(`üìã Found ${templates.length} templates`);
        
        if (templates.length === 0) {
            throw new Error('No templates found in modal');
        }
        
        let targetTemplate = null;
        
        // –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É
        for (const template of templates) {
            const textElement = template.querySelector('div[data-testid="collapsable-text"]');
            const titleElement = template.querySelector('span[data-testid="reply-title"]');
            
            if (textElement) {
                const templateText = textElement.textContent?.trim();
                const templateTitle = titleElement?.textContent?.trim() || '';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
                if (templateText && templateText.includes(this.templateConfig.templateText)) {
                    console.log('‚úÖ Found matching template by text');
                    targetTemplate = template;
                    break;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
                if (this.templateConfig.templateTitle && templateTitle.includes(this.templateConfig.templateTitle)) {
                    console.log('‚úÖ Found matching template by title:', templateTitle);
                    targetTemplate = template;
                    break;
                }
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                if (templateTitle.includes('1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')) {
                    console.log('‚úÖ Found greeting template 1.1');
                    targetTemplate = template;
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        if (!targetTemplate && templates.length > 0) {
            console.log('‚ö†Ô∏è Specific template not found, using first template');
            targetTemplate = templates[0];
        } else if (!targetTemplate) {
            throw new Error('No templates available in modal');
        }
        
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω
        const templateTitle = targetTemplate.querySelector('span[data-testid="reply-title"]')?.textContent;
        console.log(`üëÜ Clicking template: ${templateTitle}`);
        
        targetTemplate.click();
        
        // –ñ–¥–µ–º, –ø–æ–∫–∞ —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–∏—Ç—Å—è
        await this.wait(800);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–∏–ª—Å—è
        const messageInput = document.querySelector('textarea') || 
                           document.querySelector('[contenteditable="true"]') ||
                           document.querySelector('div[role="textbox"]');
        
        if (messageInput) {
            const insertedText = messageInput.value || messageInput.textContent || messageInput.innerText;
            if (insertedText && insertedText.trim().length > 0) {
                console.log('‚úÖ Template text inserted successfully');
                console.log('üìù Text preview:', insertedText.substring(0, 50) + '...');
            } else {
                console.log('‚ö†Ô∏è Warning: No text detected in input field');
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–æ
        const closeButton = document.querySelector('div[data-testid="modal"] button[data-testid="functionButton"]');
        if (closeButton) {
            console.log('üîí Closing modal...');
            closeButton.click();
            await this.wait(300);
        }
        
        // Step 4: Final validation before sending message
        console.log('üì§ Step 4: Final validation and sending message...');
        
        // Final validation checks
        const messageInputFinal = document.querySelector('textarea') || 
                                 document.querySelector('[contenteditable="true"]') ||
                                 document.querySelector('div[role="textbox"]');
        
        if (!messageInputFinal) {
            throw new Error('Final validation failed: Message input not found');
        }
        
        const finalText = messageInputFinal.value || messageInputFinal.textContent || messageInputFinal.innerText;
        if (!finalText || finalText.trim().length === 0) {
            throw new Error('Final validation failed: No message text to send');
        }
        
        if (finalText.trim().length < 10) {
            throw new Error('Final validation failed: Message text too short');
        }
        
        console.log('‚úÖ Final validation passed, message ready to send');
        console.log('üìù Final message preview:', finalText.substring(0, 100) + (finalText.length > 100 ? '...' : ''));
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendButtonSelectors = [
            'button[title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
            'button[title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"]',
            'button[aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
            'button[aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"]',
            'button[data-testid="send-message"]',
            'button[data-testid="send-button"]',
            'button[type="submit"]:not([disabled])',
            '.send-button',
            '.message-send'
        ];
        
        let sendButton = null;
        
        for (const selector of sendButtonSelectors) {
            sendButton = document.querySelector(selector);
            if (sendButton && !sendButton.disabled) {
                console.log('‚úÖ Found send button with selector:', selector);
                break;
            }
        }
        
        if (!sendButton) {
            console.log('‚ö†Ô∏è Send button not found, trying Enter key method...');
            
            if (messageInput) {
                messageInput.focus();
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ Enter
                const enterEvent = new KeyboardEvent('keydown', {
                    key: 'Enter',
                    code: 'Enter',
                    keyCode: 13,
                    which: 13,
                    bubbles: true,
                    cancelable: true
                });
                
                messageInput.dispatchEvent(enterEvent);
                console.log('‚å®Ô∏è Enter key pressed');
            } else {
                throw new Error('No send button and no message input found');
            }
        } else {
            // Check debouncing before clicking
            const buttonId = 'send-button';
            if (this.isClickDebounced(buttonId)) {
                console.log('‚è≥ Send button click debounced, skipping');
                return;
            }
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è)
            sendButton.click();
            this.recordClick(buttonId);
            
            console.log('‚úÖ Send button clicked');
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        await this.wait(500);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        if (messageInput) {
            const remainingText = messageInput.value || messageInput.textContent || messageInput.innerText;
            if (!remainingText || remainingText.trim().length === 0) {
                console.log('‚úÖ Message sent successfully (input field is empty)');
            } else {
                console.log('‚ö†Ô∏è Warning: Input field still contains text');
            }
        }
        
        // ... –≤–µ—Å—å –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ...
        
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –°–†–ê–ó–£ –º–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        // –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        console.log('‚úÖ Successfully processed appeal:', appeal.appealId);
        
        // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
        const normalizedId = appeal.appealId.toString().replace(/^#/, '').trim();
        this.processedAppeals.add(normalizedId);
        this.processedTimestamps.set(normalizedId, Date.now());

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        this.greetedAppeals.set(normalizedId, Date.now());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        const greetedObject = {};
        this.greetedAppeals.forEach((timestamp, id) => {
            greetedObject[id] = timestamp;
        });
        chrome.storage.local.set({ greetedAppeals: greetedObject });

        // –ö–†–ò–¢–ò–ß–ù–û: –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage, –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—è
        await this.saveProcessedAppealImmediately(normalizedId);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        activity.success = true;
        activity.responseTime = Date.now() - startTime;
        
    } catch (error) {
        console.error('‚ùå Error processing appeal:', error.message);
        
        // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
        const messageInput = document.querySelector('textarea') || 
                           document.querySelector('[contenteditable="true"]');
        const hasText = messageInput && (messageInput.value || messageInput.textContent || '').trim();
        
        if (!hasText) {
            // –ü–æ–ª–µ –ø—É—Å—Ç–æ–µ - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            console.log('‚ö†Ô∏è Input field is empty - message might have been sent');
            
            // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –º–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
            const normalizedId = appeal.appealId.toString().replace(/^#/, '').trim();
            this.processedAppeals.add(normalizedId);
            this.processedTimestamps.set(normalizedId, Date.now());
            await this.saveProcessedAppealImmediately(normalizedId);

            console.log('‚ö†Ô∏è Marked as processed to prevent duplicates');
            return; // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
        }
        
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        activity.success = false;
        activity.error = error.message;
        activity.responseTime = Date.now() - startTime;
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–¢–ù–û –í –û–ß–ï–†–ï–î–¨ –ü–†–ò –û–®–ò–ë–ö–ê–•
        // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–ø–∞–º–∞
        console.log('‚ùå Processing failed, NOT retrying to prevent spam');
        console.log('Appeal will NOT be added back to queue:', appeal.appealId);
        
        // –ú–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID)
        const normalizedFailedId = appeal.appealId.toString().replace(/^#/, '').trim();
        this.processedAppeals.add(normalizedFailedId);
        this.processedTimestamps.set(normalizedFailedId, Date.now());
        await this.saveProcessedAppealImmediately(normalizedFailedId);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    this.saveRecentActivity(activity);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä Processing complete:', {
        appealId: appeal.appealId,
        success: activity.success,
        time: `${activity.responseTime}ms`,
        retries: appeal.retryCount || 0
    });
}

    async selectAppeal(appeal) {
        console.log('üëÜ Selecting appeal:', appeal.appealId);
        
        // Method 1: If we have the stored element, try to click it
        if (appeal.element && document.contains(appeal.element)) {
            console.log('‚úÖ Using stored element');
            console.log('  Element details:', {
                tagName: appeal.element.tagName,
                className: appeal.element.className,
                testid: appeal.element.dataset.testid
            });

            // Make element visible and clickable
            appeal.element.scrollIntoView({ behavior: 'smooth', block: 'center' });
            await this.wait(300);

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
            const clickMethods = [
                // 1. –ü—Ä—è–º–æ–π –∫–ª–∏–∫
                () => {
                    console.log('  Trying direct click...');
                    appeal.element.click();
                },
                // 2. –ö–ª–∏–∫ –ø–æ –¥–æ—á–µ—Ä–Ω–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                () => {
                    const clickable = appeal.element.querySelector('a, button, [role="button"], [data-testid*="item"], [data-testid="appeal-preview"]');
                    if (clickable) {
                        console.log('  Trying child element click...');
                        clickable.click();
                        return true;
                    }
                },
                // 3. –ú–∞—É—Å —Å–æ–±—ã—Ç–∏—è
                () => {
                    console.log('  Trying mouse events...');
                    const rect = appeal.element.getBoundingClientRect();
                    const centerX = rect.left + rect.width / 2;
                    const centerY = rect.top + rect.height / 2;

                    ['mousedown', 'mouseup', 'click'].forEach(eventType => {
                        const event = new MouseEvent(eventType, {
                            bubbles: true,
                            cancelable: true,
                            clientX: centerX,
                            clientY: centerY
                        });
                        appeal.element.dispatchEvent(event);
                    });
                }
            ];

            // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥
            for (const method of clickMethods) {
                try {
                    method();
                    await this.wait(1000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª—Å—è –ª–∏ —á–∞—Ç
                    const chatOpened = document.querySelector('textarea[placeholder*="–ù–∞–ø–∏—à–∏—Ç–µ"], textarea[placeholder*="–í–≤–µ–¥–∏—Ç–µ"], [contenteditable="true"]');
                    if (chatOpened) {
                        console.log('‚úÖ Chat opened successfully!');
                        return true;
                    }
                } catch (e) {
                    console.log('  Method failed:', e.message);
                }
            }

            console.log('‚ö†Ô∏è All click methods failed, but continuing...');
            return true;
        }

        console.log('üîç Searching for appeal in DOM...');

        // Method 2: Search by data attributes
        const dataSelectors = [
            `[data-appeal-id="${appeal.appealId}"]`,
            `[data-appealid="${appeal.appealId}"]`,
            `[data-id="${appeal.appealId}"]`
        ];

        for (const selector of dataSelectors) {
            try {
                const element = document.querySelector(selector);
                if (element && element.offsetHeight > 0) { // Check if visible
                    console.log('‚úÖ Found by data attribute:', selector);
                    element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    await this.wait(300);
                    element.click();
                    await this.wait(500);
                    return true;
                }
            } catch (e) {
                // Invalid selector
            }
        }

        // Method 2.5: –ü–æ–∏—Å–∫ –ø–æ OmniChat-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        console.log('üîç Searching for appeal by OmniChat selectors...');
        const omniSelectors = [
            '[data-testid="appeal-preview"]', // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            '.sc-dUHDFv.hzjVGF', // –ö–ª–∞—Å—Å –∏–∑ –ª–æ–≥–æ–≤
            '[class*="sc-dUHDFv"]', // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            '#scroll-box-root [data-testid="appeal-preview"]' // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å
        ];

        for (const selector of omniSelectors) {
            try {
                const elements = document.querySelectorAll(selector);
                console.log(`  Selector "${selector}" found ${elements.length} elements`);

                for (const element of elements) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–º—è –∏–∑ appealId
                    const elementText = element.textContent || '';
                    const appealIdParts = appeal.appealId.split('_');
                    const hasMatchingText = appealIdParts.some(part => elementText.includes(part));

                    if (hasMatchingText && element.offsetHeight > 0) {
                        console.log('‚úÖ Found matching element by text content');
                        console.log('  Text preview:', elementText.substring(0, 100));

                        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        await this.wait(500);

                        // –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫
                        element.click();
                        await this.wait(1000);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        const chatOpened = document.querySelector('textarea[placeholder*="–ù–∞–ø–∏—à–∏—Ç–µ"], textarea[placeholder*="–í–≤–µ–¥–∏—Ç–µ"], [contenteditable="true"]');
                        if (chatOpened) {
                            console.log('‚úÖ Chat opened after OmniChat selector click!');
                            return true;
                        }
                    }
                }
            } catch (e) {
                console.log('  Selector error:', e.message);
            }
        }

        // Method 3: Search by text content in sidebar
        console.log('üîç Searching by text content...');
        const sidebarSelectors = [
            '.sidebar-content',
            '.chat-list',
            '.appeals-list',
            '.left-panel',
            '.conversations-list'
        ];
        
        let searchContainer = document.body;
        for (const sidebarSelector of sidebarSelectors) {
            const sidebar = document.querySelector(sidebarSelector);
            if (sidebar) {
                searchContainer = sidebar;
                break;
            }
        }
        
        // Look for appeal items within the container
        const appealItems = searchContainer.querySelectorAll('div, li, a, [role="button"]');
        for (const item of appealItems) {
            const text = item.textContent?.trim();
            if (text && (text.includes(appeal.appealId) || text.includes('#' + appeal.appealId))) {
                // Verify this looks like an appeal item
                if (item.offsetHeight > 20 && item.offsetWidth > 50) {
                    console.log('‚úÖ Found by text content:', text.substring(0, 50));
                    item.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    await this.wait(300);
                    item.click();
                    item.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                    await this.wait(500);
                    return true;
                }
            }
        }

        // Method 4: Try to find first unread appeal (fallback)
        console.log('‚ö†Ô∏è Appeal not found, trying first unread...');
        const unreadSelectors = [
            '.unread',
            '.new',
            '[data-status="new"]',
            '.appeal-item:not(.read)',
            '.chat-item:not(.read)'
        ];
        
        for (const selector of unreadSelectors) {
            const unreadItems = searchContainer.querySelectorAll(selector);
            if (unreadItems.length > 0) {
                const firstUnread = unreadItems[0];
                if (firstUnread.offsetHeight > 0) {
                    console.log('üìã Selecting first unread appeal as fallback');
                    firstUnread.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    await this.wait(300);
                    firstUnread.click();
                    await this.wait(500);
                    return true;
                }
            }
        }

        console.log('‚ùå Could not find or select appeal:', appeal.appealId);
        return false;
    }

    async openTemplateSelector() {
        console.log('üìã Opening template selector...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ OmniChat
        const templateButton = document.querySelector('button[data-testid="choose-templates"]');
        
        if (templateButton) {
            console.log('‚úÖ Found template button:', templateButton.title);
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
            templateButton.click();
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await this.wait(500);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            const modal = document.querySelector('div[data-testid="modal"]');
            if (modal) {
                console.log('‚úÖ Template modal opened');
                
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
                await this.wait(300);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
                const templates = document.querySelectorAll('div[data-testid="reply-template"]');
                console.log(`üìã Found ${templates.length} templates`);
                
                return true;
            }
        }
        
        console.log('‚ùå Failed to open template selector');
        return false;
    }

    async selectTemplate() {
        console.log('‚úÖ Selecting template:', this.templateConfig.templateText);
        
        // –ò—â–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        const templates = document.querySelectorAll('div[data-testid="reply-template"]');
        
        if (templates.length === 0) {
            console.log('‚ùå No templates found');
            return false;
        }
        
        // –ò—â–µ–º –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É
        let targetTemplate = null;
        
        for (const template of templates) {
            // –ò—â–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
            const textElement = template.querySelector('div[data-testid="collapsable-text"]');
            const titleElement = template.querySelector('span[data-testid="reply-title"]');
            
            if (textElement) {
                const templateText = textElement.textContent?.trim();
                const templateTitle = titleElement?.textContent?.trim() || '';
                
                console.log(`Checking template: ${templateTitle}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É
                if (templateText && templateText.includes(this.templateConfig.templateText)) {
                    console.log('‚úÖ Found matching template by text');
                    targetTemplate = template;
                    break;
                }
                
                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
                if (templateTitle.includes('1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')) {
                    console.log('‚úÖ Found template 1.1 (first greeting template)');
                    targetTemplate = template;
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
        if (!targetTemplate) {
            console.log('‚ö†Ô∏è Template not found by text, selecting first template');
            targetTemplate = templates[0];
        }
        
        if (targetTemplate) {
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω
            targetTemplate.click();
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –≤–Ω—É—Ç—Ä–∏
            const clickableArea = targetTemplate.querySelector('div[data-testid="collapsable-text"]') || 
                                targetTemplate.querySelector('.sc-hLtZSE') || 
                                targetTemplate;
            
            clickableArea.click();
            
            console.log('‚úÖ Template clicked');
            
            // –ñ–¥–µ–º, –ø–æ–∫–∞ —à–∞–±–ª–æ–Ω –≤—Å—Ç–∞–≤–∏—Ç—Å—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            await this.wait(500);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            const closeButton = document.querySelector('button[data-testid="functionButton"]');
            if (closeButton) {
                closeButton.click();
                console.log('‚úÖ Modal closed');
            }
            
            return true;
        }
        
        console.log('‚ùå Failed to select template');
        return false;
    }

    async sendTemplateMessage() {
        console.log('üì§ Sending template message...');
        
        // –ñ–¥–µ–º, –ø–æ–∫–∞ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç—Å—è
        await this.wait(500);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const messageInput = document.querySelector('textarea') || 
                            document.querySelector('[contenteditable="true"]') ||
                            document.querySelector('div[role="textbox"]');
        
        if (messageInput) {
            const currentText = messageInput.value || messageInput.textContent || messageInput.innerText;
            console.log('üìù Current message text:', currentText?.substring(0, 50) + '...');
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendButtonSelectors = [
            'button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
            'button[aria-label*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
            'button[title*="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
            'button[aria-label*="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
            'button[data-testid="send-message"]',
            'button[data-testid="send-button"]',
            '.message-send-button',
            'button[type="submit"]:not([disabled])'
        ];
        
        let sendButton = null;
        
        for (const selector of sendButtonSelectors) {
            sendButton = document.querySelector(selector);
            if (sendButton && !sendButton.disabled) {
                console.log('‚úÖ Found send button with selector:', selector);
                break;
            }
        }
        
        if (sendButton) {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞
            const rect = sendButton.getBoundingClientRect();
            if (rect.width > 0 && rect.height > 0) {
                // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                sendButton.click();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                sendButton.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
                sendButton.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
                sendButton.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                
                console.log('‚úÖ Send button clicked');
                return true;
            }
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –Ω–∞–∂–∞—Ç–∏–µ Enter
        if (messageInput) {
            console.log('‚ö†Ô∏è Send button not found, trying Enter key');
            
            messageInput.focus();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ Enter
            const enterEvent = new KeyboardEvent('keydown', {
                key: 'Enter',
                code: 'Enter',
                keyCode: 13,
                which: 13,
                bubbles: true,
                cancelable: true
            });
            
            messageInput.dispatchEvent(enterEvent);
            
            console.log('‚úÖ Enter key pressed');
            return true;
        }
        
        console.log('‚ùå Failed to send message');
        return false;
    }

    // ===== HELPER METHODS =====
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async waitForChatUI(maxAttempts = 8) {
        console.log('üîÑ Advanced chat UI detection...');

        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            console.log(`‚è≥ Attempt ${attempt}/${maxAttempts}: Scanning for chat UI...`);

            // –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messageInputSelectors = [
                'textarea[placeholder*="–ù–∞–ø–∏—à–∏—Ç–µ"]',
                'textarea[placeholder*="–í–≤–µ–¥–∏—Ç–µ"]',
                'textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]',
                '[contenteditable="true"]',
                'textarea[data-testid*="message"]',
                'textarea[data-testid*="input"]',
                'input[data-testid*="message"]',
                'div[data-testid*="editor"]'
            ];

            for (const selector of messageInputSelectors) {
                const input = document.querySelector(selector);
                if (input && input.offsetHeight > 0 && !input.disabled) {
                    console.log(`‚úÖ Chat UI ready! Found input: ${selector}`);
                    console.log('  Input details:', {
                        placeholder: input.placeholder || 'none',
                        className: input.className,
                        visible: input.offsetHeight > 0
                    });
                    return true;
                }
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏
            const allInputs = document.querySelectorAll('input, textarea, [contenteditable]');
            console.log(`  Found ${allInputs.length} input elements:`);
            allInputs.forEach((input, i) => {
                if (i < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    console.log(`    ${i+1}. ${input.tagName} - placeholder: "${input.placeholder || 'none'}" - class: "${input.className}" - visible: ${input.offsetHeight > 0}`);
                }
            });

            if (attempt < maxAttempts) {
                await this.wait(1500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            }
        }

        console.log('‚ö†Ô∏è Chat UI not detected, but continuing with process...');
        return false;
    }

    saveProcessedAppeal(appealId) {
        chrome.storage.local.get(['processedAppeals', 'processedTimestamps'], (result) => {
            const processed = result.processedAppeals || [];
            const timestamps = result.processedTimestamps || {};
            
            const now = Date.now();
            
            processed.push({
                appealId: appealId,
                timestamp: now,
                date: new Date().toISOString()
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º timestamp –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            timestamps[appealId] = now;
            
            // Keep only last 100 processed appeals
            const trimmed = processed.slice(-100);
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ timestamps (—Å—Ç–∞—Ä—à–µ 3 —á–∞—Å–æ–≤)
            const threeHoursAgo = now - 3 * 60 * 60 * 1000;
            const cleanedTimestamps = {};
            Object.entries(timestamps).forEach(([id, timestamp]) => {
                if (timestamp > threeHoursAgo) {
                    cleanedTimestamps[id] = timestamp;
                }
            });
            
            chrome.storage.local.set({ 
                processedAppeals: trimmed,
                processedTimestamps: cleanedTimestamps
            });
        });
    }

    async saveProcessedAppealImmediately(appealId) {
        return new Promise((resolve) => {
            chrome.storage.local.get(['processedAppeals', 'processedTimestamps'], (result) => {
                const processed = result.processedAppeals || [];
                const timestamps = result.processedTimestamps || {};
                
                const now = Date.now();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                const alreadyExists = processed.some(item => item.appealId === appealId);
                if (!alreadyExists) {
                    processed.push({
                        appealId: appealId,
                        timestamp: now,
                        date: new Date().toISOString()
                    });
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                timestamps[appealId] = now;
                
                // Keep only last 200 processed appeals (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç)
                const trimmed = processed.slice(-200);
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ timestamps (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
                const oneDayAgo = now - 24 * 60 * 60 * 1000;
                const cleanedTimestamps = {};
                Object.entries(timestamps).forEach(([id, timestamp]) => {
                    if (timestamp > oneDayAgo || id === appealId) { // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π
                        cleanedTimestamps[id] = timestamp;
                    }
                });
                
                // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
                chrome.storage.local.set({ 
                    processedAppeals: trimmed,
                    processedTimestamps: cleanedTimestamps
                }, () => {
                    console.log('üíæ Appeal saved to storage:', appealId);
                    resolve();
                });
            });
        });
    }

    loadSettings() {
        chrome.storage.local.get([
            'autoResponseEnabled', 
            'processedAppeals', 
            'templateConfig', 
            'processedTimestamps'
        ], (result) => {
            if (result.autoResponseEnabled !== undefined) {
                this.autoResponseEnabled = result.autoResponseEnabled;
            }
            
            // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
            if (result.processedAppeals) {
                console.log(`üì• Loading ${result.processedAppeals.length} processed appeals from storage`);
                result.processedAppeals.forEach(item => {
                    this.processedAppeals.add(item.appealId);
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ timestamps –¥–ª—è –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if (item.timestamp) {
                        this.processedTimestamps.set(item.appealId, item.timestamp);
                    }
                });
            }
            
            if (result.processedTimestamps) {
                const now = Date.now();
                const oneDayAgo = now - 24 * 60 * 60 * 1000;
                let loadedCount = 0;
                
                Object.entries(result.processedTimestamps).forEach(([appealId, timestamp]) => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                    if (timestamp > oneDayAgo) {
                        this.processedTimestamps.set(appealId, timestamp);
                        this.processedAppeals.add(appealId);
                        loadedCount++;
                    }
                });
                
                console.log(`üßπ Loaded ${loadedCount} timestamps from last 24 hours`);
            }
            
            if (result.templateConfig) {
                Object.assign(this.templateConfig, result.templateConfig);
            }
            
            console.log('‚öôÔ∏è Settings loaded:');
            console.log('  - Auto-response:', this.autoResponseEnabled);
            console.log('  - Processed appeals:', this.processedAppeals.size);
            console.log('  - Active timestamps:', this.processedTimestamps.size);
        });
    }

    startPeriodicSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å storage –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            chrome.storage.local.get(['processedTimestamps'], (result) => {
                if (result.processedTimestamps) {
                    const now = Date.now();
                    const oneDayAgo = now - 24 * 60 * 60 * 1000;
                    let syncedCount = 0;
                    
                    Object.entries(result.processedTimestamps).forEach(([appealId, timestamp]) => {
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                        if (!this.processedTimestamps.has(appealId) && timestamp > oneDayAgo) {
                            this.processedTimestamps.set(appealId, timestamp);
                            this.processedAppeals.add(appealId);
                            syncedCount++;
                        }
                    });
                    
                    if (syncedCount > 0) {
                        console.log(`üì• Synced ${syncedCount} appeals from storage`);
                    }
                }
            });
        }, 30000);
        
        console.log('üîÑ Periodic sync started (every 30 seconds)');
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
    startPeriodicAppealCheck() {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 30 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 15
        setInterval(() => {
            if (this.autoResponseEnabled && !this.isProcessingQueue) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if (this.appealQueue.length === 0) {
                    console.log('üîç Periodic appeal check...');
                    this.checkForExistingAppeals();
                } else {
                    console.log('‚è≥ Skipping periodic check - queue not empty');
                }
            }
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 15

        console.log('üï∞Ô∏è Periodic appeal check started (every 30 seconds)');
    }

    startPeriodicCleanup() {
        setInterval(() => {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
            const twoHoursAgo = Date.now() - 2 * 60 * 60 * 1000;

            this.greetedAppeals.forEach((timestamp, appealId) => {
                if (timestamp < twoHoursAgo) {
                    this.greetedAppeals.delete(appealId);
                }
            });

            console.log('üßπ Cleanup completed, active greetings:', this.greetedAppeals.size);
        }, 10 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    }

    // ===== EXISTING METHODS (Keep for compatibility) =====
    
    injectMainWorldScript() {
        const script = document.createElement('script');
        script.textContent = `
            (function() {
                console.log('üéØ OmniChat Interceptor injected');
                
                const originalFetch = window.fetch;
                const originalXHRSend = XMLHttpRequest.prototype.send;
                
                function sendToContentScript(data) {
                    window.postMessage({
                        source: 'omnichat-interceptor',
                        type: 'network-event',
                        data: data
                    }, '*');
                }
                
                // Intercept Fetch
                window.fetch = async function(...args) {
                    const [url, options = {}] = args;
                    const requestId = Date.now() + '-' + Math.random();
                    
                    sendToContentScript({
                        id: requestId,
                        type: 'fetch',
                        phase: 'request',
                        url: url.toString(),
                        method: options.method || 'GET',
                        body: options.body,
                        timestamp: Date.now()
                    });
                    
                    try {
                        const response = await originalFetch.apply(this, args);
                        const clonedResponse = response.clone();
                        
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            clonedResponse.json().then(body => {
                                sendToContentScript({
                                    id: requestId,
                                    type: 'fetch',
                                    phase: 'response',
                                    url: url.toString(),
                                    status: response.status,
                                    body: body,
                                    timestamp: Date.now()
                                });
                            }).catch(() => {});
                        }
                        
                        return response;
                    } catch (error) {
                        sendToContentScript({
                            id: requestId,
                            type: 'fetch',
                            phase: 'error',
                            error: error.message
                        });
                        throw error;
                    }
                };
                
                // Store URL in XHR
                const originalXHROpen = XMLHttpRequest.prototype.open;
                XMLHttpRequest.prototype.open = function(method, url, ...args) {
                    this._method = method;
                    this._url = url;
                    return originalXHROpen.apply(this, [method, url, ...args]);
                };
                
                console.log('‚úÖ Interceptors installed');
            })();
        `;
        
        (document.head || document.documentElement).appendChild(script);
        script.remove();
        
        window.addEventListener('message', (event) => {
            if (event.data && event.data.source === 'omnichat-interceptor') {
                this.handleInterceptedData(event.data.data);
            }
        });
    }

    handleInterceptedData(data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ appealId
        if (data.url && data.url.includes('appealId=')) {
            const urlMatch = data.url.match(/appealId=(\d+)/);
            if (urlMatch) {
                const appealId = urlMatch[1];
                console.log('üîç Found appealId in URL:', appealId);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                if (this.isAppealEligibleForProcessing(appealId)) {
                    setTimeout(() => {
                        console.log('üÜï New appeal from API:', appealId);
                        this.addAppealToQueue({
                            appealId: appealId,
                            timestamp: Date.now(),
                            fromAPI: true
                        });
                    }, 1000);
                }
            }
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if (data.body) {
            const dialogId = this.findDialogIdInObject(data.body);
            const appealId = this.findAppealIdInObject(data.body);
            
            if (dialogId) {
                this.saveDialogId(dialogId, data);
            }
            
            if (appealId) {
                this.saveAppealId(appealId, dialogId, data);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
                if (this.isNewAppealNotification(data)) {
                    console.log('üîî New appeal detected via API:', appealId);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                    setTimeout(() => {
                        this.checkForExistingAppeals();
                    }, 1000);
                }
            }
        }
        
        this.logNetworkEvent(data);
    }

    isNewAppealNotification(data) {
        // Check if this is a notification about new appeal
        const indicators = [
            'new_appeal',
            'new_chat',
            'incoming_message',
            'appeal_created',
            'notification'
        ];
        
        const url = data.url?.toLowerCase() || '';
        const body = JSON.stringify(data.body).toLowerCase();
        
        return indicators.some(indicator => 
            url.includes(indicator) || body.includes(indicator)
        );
    }

    findDialogIdInObject(obj) {
        if (!obj || typeof obj !== 'object') return null;
        
        const directKeys = ['dialogId', 'dialog_id', 'dialogID', 'DialogId', 'DIALOG_ID'];
        for (const key of directKeys) {
            if (obj[key]) return String(obj[key]);
        }
        
        // Nested search
        const queue = [obj];
        const visited = new Set();
        
        while (queue.length > 0) {
            const current = queue.shift();
            if (!current || visited.has(current)) continue;
            visited.add(current);
            
            for (const [key, value] of Object.entries(current)) {
                if (key.toLowerCase().includes('dialog') && key.toLowerCase().includes('id')) {
                    if (value && (typeof value === 'string' || typeof value === 'number')) {
                        return String(value);
                    }
                }
                
                if (typeof value === 'object' && value !== null) {
                    queue.push(value);
                }
            }
        }
        
        return null;
    }

    findAppealIdInObject(obj) {
        if (!obj || typeof obj !== 'object') return null;
        
        const directKeys = ['appealId', 'appeal_id', 'appealID', 'AppealId', 'APPEAL_ID'];
        for (const key of directKeys) {
            if (obj[key]) return String(obj[key]);
        }
        
        const queue = [obj];
        const visited = new Set();
        
        while (queue.length > 0) {
            const current = queue.shift();
            if (!current || visited.has(current)) continue;
            visited.add(current);
            
            for (const [key, value] of Object.entries(current)) {
                if (key.toLowerCase().includes('appeal') && key.toLowerCase().includes('id')) {
                    if (value && (typeof value === 'string' || typeof value === 'number')) {
                        return String(value);
                    }
                }
                
                if (typeof value === 'object' && value !== null) {
                    queue.push(value);
                }
            }
        }
        
        return null;
    }

    saveDialogId(dialogId, sourceData) {
        if (this.dialogIds.has(dialogId)) {
            const existing = this.dialogIds.get(dialogId);
            existing.lastSeen = Date.now();
            existing.seenCount = (existing.seenCount || 1) + 1;
        } else {
            const entry = {
                dialogId: dialogId,
                firstSeen: Date.now(),
                lastSeen: Date.now(),
                source: sourceData.url || sourceData.source || sourceData.type,
                type: sourceData.type,
                seenCount: 1
            };
            
            this.dialogIds.set(dialogId, entry);
            console.log('üíæ New dialogId saved:', dialogId);
            
            this.syncToStorage();
            
            chrome.runtime.sendMessage({
                action: 'newDialogId',
                dialogId: dialogId,
                data: entry
            }).catch(() => {});
        }
    }

    saveAppealId(appealId, dialogId, sourceData) {
        const entry = {
            appealId: appealId,
            dialogId: dialogId,
            firstSeen: Date.now(),
            source: sourceData.url || sourceData.source || sourceData.type,
            type: sourceData.type
        };
        
        this.appealIds.set(appealId, entry);
        console.log('üíæ AppealId saved:', appealId, '-> dialogId:', dialogId);
    }

    syncToStorage() {
        const dialogIdsArray = Array.from(this.dialogIds.values());
        chrome.storage.local.set({ 
            dialogIds: dialogIdsArray,
            lastUpdated: Date.now()
        });
    }

    logNetworkEvent(data) {
        this.networkLog.push(data);
        
        if (this.networkLog.length > 1000) {
            this.networkLog.shift();
        }
        
        if (this.debugMode && data.phase === 'response') {
            console.log(`üìä ${data.type.toUpperCase()} ${data.phase}:`, data.url || data.id);
        }
    }

    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, _, sendResponse) => {
            console.log('üì® Message received:', request.action);
            
            switch(request.action) {
                case 'getDialogIds':
                    sendResponse({
                        success: true,
                        dialogIds: Array.from(this.dialogIds.values()),
                        appealIds: Array.from(this.appealIds.values())
                    });
                    break;
                    
                case 'getNetworkLog':
                    sendResponse({
                        success: true,
                        networkLog: this.networkLog
                    });
                    break;
                    
                case 'toggleAutoResponse':
                    this.autoResponseEnabled = !this.autoResponseEnabled;
                    chrome.storage.local.set({ autoResponseEnabled: this.autoResponseEnabled });
                    sendResponse({
                        success: true,
                        enabled: this.autoResponseEnabled
                    });
                    break;
                    
                case 'clearData':
                    this.dialogIds.clear();
                    this.appealIds.clear();
                    this.networkLog = [];
                    this.processedAppeals.clear();
                    this.processedTimestamps.clear();
                    this.appealQueue = [];
                    chrome.storage.local.remove(['dialogIds', 'appealIds', 'networkLog', 'processedAppeals', 'processedTimestamps']);
                    sendResponse({ success: true });
                    break;
                    
                case 'testAutoResponse':
                    // Manual test trigger
                    this.checkForExistingAppeals();
                    sendResponse({ success: true });
                    break;
                    
                case 'getStats':
                    sendResponse({
                        success: true,
                        stats: {
                            dialogIdsCount: this.dialogIds.size,
                            appealIdsCount: this.appealIds.size,
                            networkLogCount: this.networkLog.length,
                            autoResponseEnabled: this.autoResponseEnabled,
                            currentUrl: window.location.href,
                            processedAppeals: this.processedAppeals.size,
                            queueLength: this.appealQueue.length,
                            isProcessing: this.isProcessingQueue
                        }
                    });
                    break;
                    
                case 'updateTemplateConfig':
                    Object.assign(this.templateConfig, request.config);
                    chrome.storage.local.set({ templateConfig: this.templateConfig });
                    sendResponse({ success: true });
                    break;
                    
                case 'getQueue':
                    sendResponse({
                        success: true,
                        queue: this.appealQueue.map(item => ({
                            appealId: item.appealId,
                            timestamp: item.timestamp,
                            retryCount: item.retryCount || 0,
                            status: this.appealQueue.indexOf(item) === 0 ? 'processing' : 'pending'
                        }))
                    });
                    break;

                case 'checkAppeals':
                    this.checkForExistingAppeals();
                    sendResponse({
                        success: true,
                        count: this.appealQueue.length
                    });
                    break;

                case 'processManual':
                    if (request.appealId) {
                        this.addAppealToQueue({
                            appealId: request.appealId,
                            timestamp: Date.now(),
                            manual: true
                        });
                        sendResponse({ success: true });
                    } else {
                        sendResponse({ success: false, error: 'No appeal ID provided' });
                    }
                    break;

                case 'clearQueue':
                    this.appealQueue = [];
                    this.isProcessingQueue = false;
                    sendResponse({ success: true });
                    break;

                case 'getProcessingHistory':
                    chrome.storage.local.get(['processedAppeals'], (result) => {
                        sendResponse({
                            success: true,
                            history: result.processedAppeals || []
                        });
                    });
                    return true; // Keep channel open for async response

                case 'getDetailedStats':
                    // Calculate success rate
                    chrome.storage.local.get(['processedAppeals', 'recentActivity'], (result) => {
                        const processed = result.processedAppeals || [];
                        const recent = result.recentActivity || [];
                        
                        const successCount = recent.filter(a => a.success).length;
                        const failCount = recent.filter(a => !a.success).length;
                        
                        sendResponse({
                            success: true,
                            stats: {
                                dialogIdsCount: this.dialogIds.size,
                                appealIdsCount: this.appealIds.size,
                                networkLogCount: this.networkLog.length,
                                autoResponseEnabled: this.autoResponseEnabled,
                                currentUrl: window.location.href,
                                processedAppeals: this.processedAppeals.size,
                                queueLength: this.appealQueue.length,
                                isProcessing: this.isProcessingQueue,
                                successCount: successCount,
                                failCount: failCount,
                                totalProcessed: processed.length,
                                avgResponseTime: this.calculateAvgResponseTime(recent)
                            }
                        });
                    });
                    return true;
                    
                default:
                    sendResponse({ success: false, error: 'Unknown action' });
            }
            
            return true;
        });
    }

    setupDOMObserver() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            this.checkForNewAppeal(node);
                        }
                    });
                }
            });
        });
        
        if (document.body) {
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
            console.log('üëÅÔ∏è DOM observer active');
        } else {
            setTimeout(() => this.setupDOMObserver(), 100);
        }
    }

    calculateAvgResponseTime(activities) {
        if (!activities || activities.length === 0) return 0;
        
        const times = activities
            .filter(a => a.responseTime)
            .map(a => a.responseTime);
        
        if (times.length === 0) return 0;
        
        const avg = times.reduce((a, b) => a + b, 0) / times.length;
        return Math.round(avg / 1000); // Convert to seconds
    }

    saveRecentActivity(activity) {
        chrome.storage.local.get(['recentActivity'], (result) => {
            const activities = result.recentActivity || [];
            activities.push(activity);
            
            // Keep only last 50 activities
            const trimmed = activities.slice(-50);
            
            chrome.storage.local.set({ recentActivity: trimmed });
        });
    }

    exposeDebugInterface() {
        window.omniAnalyzer = {
            // Core functions
            getDialogIds: () => Array.from(this.dialogIds.values()),
            getAppealIds: () => Array.from(this.appealIds.values()),
            getNetworkLog: () => this.networkLog,
            getProcessedAppeals: () => Array.from(this.processedAppeals),
            getQueue: () => this.appealQueue,
            
            // Testing functions
            testAutoResponse: () => {
                console.log('üß™ Testing auto-response...');
                this.checkForExistingAppeals();
                return 'Checking for appeals...';
            },
            
            simulateAppeal: (appealId) => {
                const simulatedAppeal = {
                    appealId: appealId || 'SIM-' + Date.now(),
                    timestamp: Date.now(),
                    simulated: true
                };
                
                // Create fake DOM element
                const fakeElement = document.createElement('div');
                fakeElement.className = 'appeal-item unread';
                fakeElement.dataset.appealId = simulatedAppeal.appealId;
                fakeElement.textContent = `Simulated Appeal ${simulatedAppeal.appealId}`;
                
                console.log('üé≠ Simulating new appeal:', simulatedAppeal.appealId);
                this.checkForNewAppeal(fakeElement);
                return 'Simulated appeal: ' + simulatedAppeal.appealId;
            },

            testGreetingSystem: () => {
                console.log('üëã Testing IMPROVED greeting system...');
                console.log('='.repeat(50));

                // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                console.log('üîß 1. Configuration check:');
                console.log('  - Auto-response enabled:', this.autoResponseEnabled);
                console.log('  - Template config:', this.templateConfig.templateTitle);
                console.log('  - Cooldown period:', this.templateConfig.cooldownPeriod / 3600000 + 'h');

                // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —á–∞—Ç–æ–≤
                console.log('\nüîç 2. Appeal detection test:');
                const testScenarios = [
                    { name: 'New chat without timer', class: 'chat-item', hasTimer: false },
                    { name: 'New chat with timer', class: 'chat-item', hasTimer: true },
                    { name: 'Already processed chat', class: 'chat-item processed', hasTimer: false }
                ];

                testScenarios.forEach((scenario, i) => {
                    console.log(`  Test ${i+1}: ${scenario.name}`);
                    const testElement = document.createElement('div');
                    testElement.className = scenario.class;
                    testElement.textContent = `Test Appeal ${Date.now() + i}`;
                    if (scenario.hasTimer) {
                        const timer = document.createElement('span');
                        timer.textContent = '45 —Å–µ–∫';
                        testElement.appendChild(timer);
                    }

                    const appealId = this.appealIdSystem.extractOrGenerateAppealId(testElement);
                    const isNew = appealId ? this.appealIdSystem.isNewUnprocessedAppeal(testElement) : false;
                    const isEligible = appealId ? this.isAppealEligibleForProcessing(appealId) : false;

                    console.log(`    - Appeal ID: ${appealId}`);
                    console.log(`    - Is new: ${isNew}`);
                    console.log(`    - Is eligible: ${isEligible}`);

                    // –ú–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
                    if (scenario.name.includes('processed')) {
                        testElement.dataset.omniProcessed = 'true';
                    }
                });

                // –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
                console.log('\nüé≠ 3. Simulating new greeting appeal:');
                const testAppeal = {
                    appealId: 'GREETING-TEST-' + Date.now(),
                    element: document.createElement('div'),
                    timestamp: Date.now(),
                    type: 'greeting',
                    test: true
                };

                testAppeal.element.className = 'chat-item new';
                testAppeal.element.textContent = 'Test greeting chat #' + testAppeal.appealId;
                testAppeal.element.dataset.appealId = testAppeal.appealId;

                console.log('  - Created test appeal:', testAppeal.appealId);

                if (this.autoResponseEnabled) {
                    console.log('  - Adding to queue for processing...');
                    const success = this.addAppealToQueue(testAppeal);
                    console.log('  - Queue result:', success ? '‚úÖ Success' : '‚ùå Failed');
                    console.log('  - Current queue length:', this.appealQueue.length);
                } else {
                    console.log('  - ‚ö†Ô∏è Auto-response disabled, skipping queue');
                }

                console.log('='.repeat(50));
                console.log('üèÅ Greeting system test completed!');

                return {
                    testAppealId: testAppeal.appealId,
                    autoResponseEnabled: this.autoResponseEnabled,
                    queueLength: this.appealQueue.length,
                    processedAppeals: this.processedAppeals.size
                };
            },

            processManual: (appealId) => {
                const appeal = {
                    appealId: appealId || 'test-' + Date.now(),
                    timestamp: Date.now(),
                    manual: true
                };
                this.addAppealToQueue(appeal);
                return 'Added to queue: ' + appeal.appealId;
            },
            
            // Control functions
            toggleAutoResponse: () => {
                this.autoResponseEnabled = !this.autoResponseEnabled;
                console.log('Auto-response:', this.autoResponseEnabled ? 'ON' : 'OFF');
                chrome.storage.local.set({ autoResponseEnabled: this.autoResponseEnabled });
                return this.autoResponseEnabled;
            },
            
            clearQueue: () => {
                this.appealQueue = [];
                this.isProcessingQueue = false;
                return 'Queue cleared';
            },
            
            pauseProcessing: () => {
                this.isProcessingQueue = false;
                return 'Processing paused';
            },
            
            resumeProcessing: () => {
                if (this.appealQueue.length > 0) {
                    this.processQueue();
                    return 'Processing resumed';
                }
                return 'Queue is empty';
            },
            
            // Configuration
            getConfig: () => this.templateConfig,
            
            updateConfig: (config) => {
                Object.assign(this.templateConfig, config);
                chrome.storage.local.set({ templateConfig: this.templateConfig });
                return 'Config updated';
            },
            
            // Statistics
            getStats: () => ({
                dialogIds: this.dialogIds.size,
                appealIds: this.appealIds.size,
                networkEvents: this.networkLog.length,
                processedAppeals: this.processedAppeals.size,
                processedTimestamps: this.processedTimestamps.size,
                queueLength: this.appealQueue.length,
                isProcessing: this.isProcessingQueue,
                autoResponse: this.autoResponseEnabled,
                config: this.templateConfig
            }),
            
            getDetailedStats: () => {
                const stats = this.getStats();
                
                // Add queue details
                stats.queueDetails = this.appealQueue.map((item, index) => ({
                    position: index + 1,
                    appealId: item.appealId,
                    waitTime: Date.now() - item.timestamp,
                    retries: item.retryCount || 0
                }));
                
                // Add processing rate
                const processedArray = Array.from(this.processedAppeals);
                const lastHour = Date.now() - 3600000;
                stats.lastHourProcessed = processedArray.filter(id => {
                    const item = this.appealIds.get(id);
                    return item && item.firstSeen > lastHour;
                }).length;
                
                return stats;
            },
            
            // DOM inspection
            findElements: () => {
                const elements = {
                    appeals: document.querySelectorAll('.appeal-item, .chat-item, .dialog-item'),
                    templateButton: document.querySelector('button[data-testid="choose-templates"]'),
                    sendButton: document.querySelector('button[title*="–æ—Ç–ø—Ä–∞–≤"], button[title*="send"]'),
                    messageInput: document.querySelector('textarea, [contenteditable="true"]')
                };
                
                console.log('üîç Found elements:', {
                    appeals: elements.appeals.length,
                    templateButton: !!elements.templateButton,
                    sendButton: !!elements.sendButton,
                    messageInput: !!elements.messageInput
                });
                
                return elements;
            },

            // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            findTemplateElements: async () => {
                console.log('üîç Searching for template elements...');
                
                const elements = {
                    templateButton: null,
                    modal: null,
                    templates: [],
                    sendButton: null
                };
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤
                elements.templateButton = document.querySelector('button[data-testid="choose-templates"]');
                if (!elements.templateButton) {
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    const alternativeSelectors = [
                        'button[title*="—à–∞–±–ª–æ–Ω"]',
                        'button[title*="template"]',
                        'button[title="–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω"]'
                    ];
                    
                    for (const selector of alternativeSelectors) {
                        elements.templateButton = document.querySelector(selector);
                        if (elements.templateButton) break;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                elements.modal = document.querySelector('div[data-testid="modal"]');
                
                // –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã
                elements.templates = document.querySelectorAll('div[data-testid="reply-template"]');
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                const sendSelectors = [
                    'button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
                    'button[aria-label*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
                    'button[type="submit"]:not([disabled])'
                ];
                
                for (const selector of sendSelectors) {
                    elements.sendButton = document.querySelector(selector);
                    if (elements.sendButton) break;
                }
                
                console.log('üìä Found elements:', {
                    templateButton: !!elements.templateButton,
                    modal: !!elements.modal,
                    templatesCount: elements.templates.length,
                    sendButton: !!elements.sendButton
                });
                
                return elements;
            },
            
            // Testing specific steps
            testSelectAppeal: async (appealId) => {
                const appeal = { appealId: appealId || this.appealQueue[0]?.appealId };
                if (!appeal.appealId) return 'No appeal to test';
                
                const result = await this.selectAppeal(appeal);
                return result ? 'Successfully selected appeal' : 'Failed to select appeal';
            },
            
            testOpenTemplate: async () => {
                const result = await this.openTemplateSelector();
                return result ? 'Template selector opened' : 'Failed to open template selector';
            },
            
            testSelectTemplate: async () => {
                const result = await this.selectTemplate();
                return result ? 'Template selected' : 'Failed to select template';
            },
            
            testSendMessage: async () => {
                const result = await this.sendTemplateMessage();
                return result ? 'Message sent' : 'Failed to send message';
            },

            // –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            testFullCycle: async () => {
                console.log('üîÑ Testing full cycle...');
                
                // 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤
                const opened = await this.openTemplateSelector();
                if (!opened) return 'Failed at step 1: open template selector';
                
                await this.wait(1000);
                
                // 2. –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
                const selected = await this.selectTemplate();
                if (!selected) return 'Failed at step 2: select template';
                
                await this.wait(1000);
                
                // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const sent = await this.sendTemplateMessage();
                if (!sent) return 'Failed at step 3: send message';
                
                return '‚úÖ Full cycle completed successfully!';
            },
            
            // –ù–æ–≤–∞—è –±—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            quickDiagnose: () => {
                console.log('üîç Quick Diagnosis:');
                console.log('AppealMonitor:', window.appealMonitor ? ('‚úÖ Available (' + (window.appealMonitor.isMonitoring ? 'monitoring' : 'stopped') + ')') : '‚ùå Not found');
                console.log('Queue length:', this.appealQueue.length);
                console.log('Currently processing:', this.currentlyProcessingAppeal || 'none');
                console.log('Processed appeals (total):', this.processedAppeals.size);
                console.log('Processed this session:', this.sessionProcessedCount);
                console.log('Auto-response:', this.autoResponseEnabled ? '‚úÖ ON' : '‚ùå OFF');
                
                if (window.appealMonitor && window.appealMonitor.isMonitoring) {
                    const sidebarAppeals = window.appealMonitor.getSidebarAppeals();
                    console.log('Sidebar appeals found:', sidebarAppeals.length);
                }
                
                return 'Check console for details';
            },
            
            // Help
            help: () => {
                console.log('üõ†Ô∏è OmniChat Analyzer Commands:');
                console.log('');
                console.log('üìä MONITORING:');
                console.log('  omniAnalyzer.getStats() - Basic statistics');
                console.log('  omniAnalyzer.getDetailedStats() - Detailed statistics');
                console.log('  omniAnalyzer.getQueue() - View current queue');
                console.log('  omniAnalyzer.findElements() - Find DOM elements');
                console.log('');
                console.log('üéÆ CONTROL:');
                console.log('  omniAnalyzer.toggleAutoResponse() - Toggle auto-response');
                console.log('  omniAnalyzer.pauseProcessing() - Pause queue processing');
                console.log('  omniAnalyzer.resumeProcessing() - Resume queue processing');
                console.log('  omniAnalyzer.clearQueue() - Clear processing queue');
                console.log('');
                console.log('üß™ TESTING:');
                console.log('  omniAnalyzer.testAutoResponse() - Check for new appeals');
                console.log('  omniAnalyzer.testGreetingSystem() - Test IMPROVED greeting system (üëç RECOMMENDED)');
                console.log('  omniAnalyzer.simulateAppeal(id) - Simulate new appeal');
                console.log('  omniAnalyzer.processManual(id) - Manually process appeal');
                console.log('  omniAnalyzer.testSelectAppeal(id) - Test appeal selection');
                console.log('  omniAnalyzer.testOpenTemplate() - Test template opening');
                console.log('  omniAnalyzer.testSelectTemplate() - Test template selection');
                console.log('  omniAnalyzer.testSendMessage() - Test message sending');
                console.log('  omniAnalyzer.testDeduplication(id) - Test deduplication logic');
                console.log('  omniAnalyzer.testCooldown(id) - Test cooldown mechanism');
                console.log('  omniAnalyzer.testMultipleAppeals() - Test multiple appeals handling');
                console.log('  omniAnalyzer.testIdExtraction() - Test appeal ID extraction patterns');
                console.log('  omniAnalyzer.testTimerDetection() - Test timer detection in appeals');
                console.log('');
                console.log('üß™ TEST HELPER:');
                console.log('  omniAnalyzer.checkElements() - Check page elements');
                console.log('  omniAnalyzer.testOpenModal() - Test modal opening');
                console.log('  omniAnalyzer.testSelectTemplate() - Test template selection');
                console.log('  omniAnalyzer.testFullCycleDryRun() - Full cycle test (no send)');
                console.log('  omniAnalyzer.testFullCycleWithSend() - Full cycle test with send');
                console.log('  checkElements() - Direct access to test functions');
                console.log('  testOpenModal() - Direct access');
                console.log('  testSelectTemplate() - Direct access');
                console.log('  testFullCycle(false/true) - Direct access');
                console.log('');
                console.log('‚öôÔ∏è CONFIGURATION:');
                console.log('  omniAnalyzer.getConfig() - Get current config');
                console.log('  omniAnalyzer.updateConfig({...}) - Update config');
                console.log('');
                console.log('üíæ DATA:');
                console.log('  omniAnalyzer.getDialogIds() - Get all dialog IDs');
                console.log('  omniAnalyzer.getAppealIds() - Get all appeal IDs');
                console.log('  omniAnalyzer.getProcessedAppeals() - Get processed appeals');
                console.log('  omniAnalyzer.getProcessedTimestamps() - Get processing timestamps');
                console.log('  omniAnalyzer.getNetworkLog() - Get network log');
                console.log('  omniAnalyzer.clearProcessedTimestamps() - Clear all timestamps');
                console.log('');
                console.log('üìä APPEAL MONITOR:');
                console.log('  appealMonitor.start() - Start monitoring');
                console.log('  appealMonitor.stop() - Stop monitoring');
                console.log('  appealMonitor.getStats() - Get statistics');
                console.log('  appealMonitor.listAppeals() - List all appeals');
                console.log('  appealMonitor.clear() - Clear all data');
            },

            // AppealMonitor integration commands
            getAppealMonitorStats: () => {
                if (window.appealMonitor) {
                    return window.appealMonitor.getStats();
                }
                return 'AppealMonitor not available';
            },

            listAppealMonitorAppeals: () => {
                if (window.appealMonitor) {
                    return window.appealMonitor.listAppeals();
                }
                return 'AppealMonitor not available';
            },

            startAppealMonitor: () => {
                if (window.appealMonitor) {
                    window.appealMonitor.start();
                    return 'AppealMonitor started';
                }
                return 'AppealMonitor not available';
            },

            stopAppealMonitor: () => {
                if (window.appealMonitor) {
                    window.appealMonitor.stop();
                    return 'AppealMonitor stopped';
                }
                return 'AppealMonitor not available';
            },

            // Test Helper integration
            checkElements: () => {
                if (typeof checkElements === 'function') {
                    return checkElements();
                }
                return 'Test helper not available';
            },

            testOpenModal: async () => {
                if (typeof testOpenModal === 'function') {
                    return await testOpenModal();
                }
                return 'Test helper not available';
            },

            testSelectTemplate: async () => {
                if (typeof testSelectTemplate === 'function') {
                    return await testSelectTemplate();
                }
                return 'Test helper not available';
            },

            testFullCycleDryRun: async () => {
                if (typeof testFullCycle === 'function') {
                    return await testFullCycle(false);
                }
                return 'Test helper not available';
            },

            testFullCycleWithSend: async () => {
                if (typeof testFullCycle === 'function') {
                    return await testFullCycle(true);
                }
                return 'Test helper not available';
            },
            
            // –ù–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            diagnoseAppealDetection: () => {
                console.log('\nüîç APPEAL DETECTION DIAGNOSIS');
                console.log('='.repeat(40));
                
                // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º AppealMonitor
                if (window.appealMonitor) {
                    console.log('‚úÖ AppealMonitor: Available');
                    console.log('  - Status:', window.appealMonitor.isMonitoring ? 'MONITORING' : 'STOPPED');
                    console.log('  - Appeals count:', window.appealMonitor.appeals.size);
                    
                    try {
                        const sidebarAppeals = window.appealMonitor.getSidebarAppeals();
                        console.log('  - Sidebar appeals:', sidebarAppeals.length);
                        sidebarAppeals.forEach((appeal, i) => {
                            console.log(`    ${i+1}. ${appeal.id} (${appeal.status}) - ${appeal.name}`);
                        });
                    } catch (e) {
                        console.log('  - Error getting sidebar appeals:', e.message);
                    }
                } else {
                    console.log('‚ùå AppealMonitor: Not available');
                }
                
                // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
                console.log('\nüéØ DOM Elements:');
                const selectors = [
                    '[data-testid="appeal-preview"]',
                    '[data-appeal-id]',
                    '.appeal-item',
                    '.unread'
                ];
                
                selectors.forEach(selector => {
                    const elements = document.querySelectorAll(selector);
                    console.log(`  ${selector}: ${elements.length} found`);
                    
                    elements.forEach((el, i) => {
                        if (i < 3) { // –ü–µ—Ä–≤—ã–µ 3
                            const appealId = this.extractAppealIdFromElement(el);
                            const isNew = this.isNewAppeal(el);
                            console.log(`    ${i+1}. ID: "${appealId}" New: ${isNew}`);
                        }
                    });
                });
                
                // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å
                console.log('\nüìä Queue Status:');
                console.log('  - Queue length:', this.appealQueue.length);
                console.log('  - Is processing:', this.isProcessingQueue);
                console.log('  - Processed appeals:', this.processedAppeals.size);
                console.log('  - Auto-response:', this.autoResponseEnabled);
                
                // 4. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ checkForExistingAppeals
                console.log('\nüß™ Test Run:');
                console.log('Running checkForExistingAppeals()...');
                this.checkForExistingAppeals();
                
                return {
                    appealMonitor: !!window.appealMonitor,
                    monitoring: window.appealMonitor?.isMonitoring || false,
                    queueLength: this.appealQueue.length,
                    processedCount: this.processedAppeals.size,
                    autoResponse: this.autoResponseEnabled
                };
            },

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            testDeduplication: (appealId) => {
                const testId = appealId || 'TEST-' + Date.now();
                console.log('üß™ Testing deduplication for:', testId);
                
                // –ü–æ–ø—ã—Ç–∫–∞ 1
                const result1 = this.isAppealEligibleForProcessing(testId);
                console.log('   First check:', result1 ? 'ELIGIBLE' : 'BLOCKED');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ processed
                this.processedAppeals.add(testId);
                this.processedTimestamps.set(testId, Date.now());
                
                // –ü–æ–ø—ã—Ç–∫–∞ 2
                const result2 = this.isAppealEligibleForProcessing(testId);
                console.log('   Second check (after processing):', result2 ? 'ELIGIBLE' : 'BLOCKED');
                
                // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                this.processedAppeals.delete(testId);
                this.processedTimestamps.delete(testId);
                
                return {
                    appealId: testId,
                    firstCheck: result1,
                    secondCheck: result2,
                    expected: 'first: true, second: false'
                };
            },

            testCooldown: (appealId) => {
                const testId = appealId || 'COOLDOWN-' + Date.now();
                console.log('üß™ Testing cooldown for:', testId);
                
                // –¢–µ—Å—Ç 1: timestamp 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
                const thirtyMinutesAgo = Date.now() - 30 * 60 * 1000;
                this.processedTimestamps.set(testId, thirtyMinutesAgo);
                
                const result1 = this.isAppealEligibleForProcessing(testId);
                console.log('   Cooldown check (30 min ago):', result1 ? 'ELIGIBLE' : 'BLOCKED');
                
                // –¢–µ—Å—Ç 2: timestamp 3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω)
                const threeHoursAgo = Date.now() - 3 * 60 * 60 * 1000;
                this.processedTimestamps.set(testId + '-OLD', threeHoursAgo);
                
                const result2 = this.isAppealEligibleForProcessing(testId + '-OLD');
                console.log('   Cooldown check (3 hours ago):', result2 ? 'ELIGIBLE' : 'BLOCKED');
                
                // –û—á–∏—Å—Ç–∫–∞
                this.processedTimestamps.delete(testId);
                this.processedTimestamps.delete(testId + '-OLD');
                
                return {
                    appealId: testId,
                    recentResult: result1,
                    oldResult: result2,
                    expected: 'recent: BLOCKED, old: ELIGIBLE (2 hour cooldown)'
                };
            },

            getProcessedTimestamps: () => {
                const timestamps = {};
                for (const [appealId, timestamp] of this.processedTimestamps.entries()) {
                    timestamps[appealId] = {
                        timestamp: timestamp,
                        age: Math.round((Date.now() - timestamp) / 1000) + 's ago',
                        date: new Date(timestamp).toLocaleString()
                    };
                }
                return timestamps;
            },

            clearProcessedTimestamps: () => {
                const size = this.processedTimestamps.size;
                this.processedTimestamps.clear();
                return `Cleared ${size} timestamps`;
            },

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
            testMultipleAppeals: () => {
                console.log('üß™ Testing multiple appeals scenario...');
                
                const testAppeals = [
                    'MULTI-1-' + Date.now(),
                    'MULTI-2-' + Date.now(),
                    'MULTI-3-' + Date.now()
                ];
                
                const results = [];
                
                testAppeals.forEach((appealId, index) => {
                    console.log(`   Testing appeal ${index + 1}: ${appealId}`);
                    
                    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å eligible
                    const eligible = this.isAppealEligibleForProcessing(appealId);
                    console.log(`     Eligible: ${eligible}`);
                    
                    if (eligible) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                        this.addAppealToQueue({
                            appealId: appealId,
                            timestamp: Date.now(),
                            test: true
                        });
                        
                        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        this.processedAppeals.add(appealId);
                        this.processedTimestamps.set(appealId, Date.now());
                    }
                    
                    results.push({
                        appealId: appealId,
                        eligible: eligible,
                        inQueue: this.appealQueue.some(a => a.appealId === appealId),
                        processed: this.processedAppeals.has(appealId)
                    });
                });
                
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                console.log('   Testing duplicate addition...');
                const duplicateResults = testAppeals.map(appealId => {
                    const eligible = this.isAppealEligibleForProcessing(appealId);
                    console.log(`     ${appealId} duplicate check: ${eligible ? 'ELIGIBLE' : 'BLOCKED'}`);
                    return eligible;
                });
                
                // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                testAppeals.forEach(appealId => {
                    this.processedAppeals.delete(appealId);
                    this.processedTimestamps.delete(appealId);
                    this.appealQueue = this.appealQueue.filter(a => a.appealId !== appealId);
                });
                
                return {
                    testAppeals: testAppeals,
                    initialResults: results,
                    duplicateResults: duplicateResults,
                    queueLength: this.appealQueue.length,
                    expected: 'all initial should be eligible, all duplicates should be blocked'
                };
            },

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è appealId
            testIdExtraction: () => {
                console.log('üß™ Testing appeal ID extraction patterns...');

                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
                const testCases = [
                    {
                        name: '–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456',
                        html: '<div>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456 –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</div>',
                        expected: '123456'
                    },
                    {
                        name: '–û–±—Ä–∞—â–µ–Ω–∏–µ: 789012',
                        html: '<div>–û–±—Ä–∞—â–µ–Ω–∏–µ: 789012 –ü–µ—Ç—Ä–æ–≤ –ò.–ò.</div>',
                        expected: '789012'
                    },
                    {
                        name: 'Appeal #345678',
                        html: '<div>Appeal #345678 status: new</div>',
                        expected: '345678'
                    },
                    {
                        name: 'ID: 901234',
                        html: '<div>ID: 901234</div>',
                        expected: '901234'
                    },
                    {
                        name: '‚Ññ 567890',
                        html: '<div>‚Ññ 567890</div>',
                        expected: '567890'
                    },
                    {
                        name: 'Data attribute',
                        html: '<div data-appeal-id="111222">Some appeal</div>',
                        expected: '111222'
                    },
                    {
                        name: 'Nested number',
                        html: '<div><span>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 333444</span> content</div>',
                        expected: '333444'
                    }
                ];

                const results = [];

                testCases.forEach(testCase => {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = testCase.html;
                    const element = tempDiv.firstElementChild;

                    const extracted = this.extractAppealIdFromElement(element);
                    const success = extracted === testCase.expected;

                    results.push({
                        name: testCase.name,
                        expected: testCase.expected,
                        extracted: extracted,
                        success: success
                    });

                    console.log(`${success ? '‚úÖ' : '‚ùå'} ${testCase.name}: expected "${testCase.expected}", got "${extracted}"`);
                });

                const successful = results.filter(r => r.success).length;
                const total = results.length;

                console.log(`\nüìä Test Results: ${successful}/${total} tests passed`);

                return {
                    results: results,
                    summary: `${successful}/${total} tests passed`,
                    success: successful === total
                };
            },

            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            testTimerDetection: () => {
                console.log('üß™ Testing timer detection in appeals...');

                const timerTestCases = [
                    {
                        name: 'Real timer structure (45 —Å–µ–∫)',
                        html: '<div class="appeal-card"><div class="sc-cewOZc ioQCCB"><span>45 —Å–µ–∫</span><svg>...</svg></div><span>–ò–≤–∞–Ω–æ–≤ –ò.–ò.</span></div>',
                        expectedTimer: true,
                        expectedSeconds: 45
                    },
                    {
                        name: 'Real timer structure (30 —Å–µ–∫)',
                        html: '<div><div class="sc-cewOZc ioQCCB"><span>30 —Å–µ–∫</span></div></div>',
                        expectedTimer: true,
                        expectedSeconds: 30
                    },
                    {
                        name: 'Timer > 60 seconds (should be false)',
                        html: '<div class="sc-cewOZc ioQCCB"><span>792 —Å–µ–∫</span></div>',
                        expectedTimer: false,
                        expectedSeconds: null
                    },
                    {
                        name: 'Timer 0:45 format',
                        html: '<div>–ü–µ—Ç—Ä–æ–≤ –ü.–ü. 0:45</div>',
                        expectedTimer: true,
                        expectedSeconds: 45
                    },
                    {
                        name: 'Timer 59 —Å–µ–∫ (boundary)',
                        html: '<div>–°–∏–¥–æ—Ä–æ–≤ –°.–°. 59 —Å–µ–∫</div>',
                        expectedTimer: true,
                        expectedSeconds: 59
                    },
                    {
                        name: 'Timer 60 —Å–µ–∫ (should be false)',
                        html: '<div>–ö—É–∑–Ω–µ—Ü–æ–≤ –ö.–ö. 60 —Å–µ–∫</div>',
                        expectedTimer: false,
                        expectedSeconds: null
                    },
                    {
                        name: 'No timer',
                        html: '<div>–ò–≤–∞–Ω–æ–≤ –ò.–ò. –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</div>',
                        expectedTimer: false,
                        expectedSeconds: null
                    },
                    {
                        name: 'Badge indicator only',
                        html: '<div>–ü–µ—Ç—Ä–æ–≤ –ü.–ü. <span class="badge">‚óè</span></div>',
                        expectedTimer: false,
                        expectedSeconds: null
                    },
                    {
                        name: 'Timer with appeal ID',
                        html: '<div>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456 <div class="sc-cewOZc ioQCCB"><span>55 —Å–µ–∫</span></div></div>',
                        expectedTimer: true,
                        expectedSeconds: 55
                    }
                ];

                const results = [];

                timerTestCases.forEach(testCase => {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = testCase.html;
                    const element = tempDiv.firstElementChild;

                    const isNew = this.isNewAppeal(element);
                    const extractedId = this.extractAppealIdFromElement(element);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    const timerContainer = element.querySelector('.sc-cewOZc.ioQCCB span') ||
                                          element.querySelector('div[class*="sc-cewOZc"] span');

                    let foundTimer = false;
                    let foundSeconds = null;

                    if (timerContainer) {
                        const timerText = timerContainer.textContent || '';
                        const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
                        if (timerMatch) {
                            const seconds = parseInt(timerMatch[1]);
                            if (seconds < 60) {
                                foundTimer = true;
                                foundSeconds = seconds;
                            }
                        }
                    }

                    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
                    if (!foundTimer) {
                        const text = element.textContent || '';
                        const timerPatterns = [
                            /(\d+)\s*—Å–µ–∫/i,                 // "45 —Å–µ–∫"
                            /(\d{1,2})\s*—Å\b/i,             // "45—Å" (–Ω–æ –Ω–µ "792—Å")
                            /(\d{1,2})\s*sec/i,             // "45sec"
                            /0:(\d{2})/,                    // "0:45"
                        ];

                        for (const pattern of timerPatterns) {
                            const match = text.match(pattern);
                            if (match) {
                                const seconds = parseInt(match[1]);
                                if (seconds < 60) {
                                    foundTimer = true;
                                    foundSeconds = seconds;
                                    break;
                                }
                            }
                        }
                    }

                    const timerSuccess = foundTimer === testCase.expectedTimer;
                    const secondsSuccess = foundSeconds === testCase.expectedSeconds;
                    const overallSuccess = timerSuccess && secondsSuccess;

                    results.push({
                        name: testCase.name,
                        expectedTimer: testCase.expectedTimer,
                        foundTimer: foundTimer,
                        expectedSeconds: testCase.expectedSeconds,
                        foundSeconds: foundSeconds,
                        isNew: isNew,
                        extractedId: extractedId,
                        success: overallSuccess
                    });

                    console.log(`${overallSuccess ? '‚úÖ' : '‚ùå'} ${testCase.name}:`);
                    console.log(`    Timer: expected ${testCase.expectedTimer}, got ${foundTimer}`);
                    console.log(`    Seconds: expected ${testCase.expectedSeconds}, got ${foundSeconds}`);
                    console.log(`    IsNew: ${isNew}, ExtractedID: ${extractedId}`);
                });

                const successful = results.filter(r => r.success).length;
                const total = results.length;

                console.log(`\nüìä Timer Test Results: ${successful}/${total} tests passed`);

                return {
                    results: results,
                    summary: `${successful}/${total} tests passed`,
                    success: successful === total
                };
            },

            // Test the new AppealIdentificationSystem
            testNewIdentificationSystem: () => {
                console.log('üß™ Testing new AppealIdentificationSystem...');

                // Create test elements with different characteristics
                const testCases = [
                    {
                        name: 'Real appeal with ID',
                        html: '<div class="appeal-item" data-appeal-id="123456"><span>–ò–≤–∞–Ω–æ–≤ –ò.–ò.</span><div>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456</div></div>',
                        expectRealId: true
                    },
                    {
                        name: 'Appeal with timer (new)',
                        html: '<div class="chat-item"><span>–ü–µ—Ç—Ä–æ–≤ –ü.–ü.</span><div class="sc-cewOZc ioQCCB"><span>45 —Å–µ–∫</span></div></div>',
                        expectNew: true
                    },
                    {
                        name: 'Appeal with old timer (not new)',
                        html: '<div class="dialog-item"><span>–°–∏–¥–æ—Ä–æ–≤ –°.–°.</span><div class="sc-cewOZc ioQCCB"><span>792 —Å–µ–∫</span></div></div>',
                        expectNew: false
                    },
                    {
                        name: 'Already processed appeal',
                        html: '<div class="appeal-item" data-omni-processed="true" data-omni-processed-id="TEMP_123"><span>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π</span></div>',
                        expectNull: true
                    }
                ];

                const results = [];

                testCases.forEach((testCase, index) => {
                    console.log(`\n--- Test ${index + 1}: ${testCase.name} ---`);

                    // Create DOM element
                    const element = document.createElement('div');
                    element.innerHTML = testCase.html;
                    const testElement = element.firstElementChild;
                    document.body.appendChild(testElement); // Add to DOM for proper testing

                    try {
                        // Test ID extraction
                        const appealId = this.appealIdSystem.extractOrGenerateAppealId(testElement);
                        console.log('üìù Generated ID:', appealId);

                        // Test new appeal detection
                        const isNew = appealId ? this.appealIdSystem.isNewUnprocessedAppeal(testElement) : false;
                        console.log('üÜï Is new appeal:', isNew);

                        // Test timer detection
                        const timerCheck = this.appealIdSystem.checkTimer(testElement);
                        console.log('‚è±Ô∏è Timer check:', timerCheck);

                        // Evaluate results
                        const success =
                            (testCase.expectRealId && appealId && /^\d+$/.test(appealId)) ||
                            (testCase.expectNew && isNew) ||
                            (!testCase.expectNew && !isNew) ||
                            (testCase.expectNull && !appealId);

                        results.push({
                            name: testCase.name,
                            appealId: appealId,
                            isNew: isNew,
                            timerCheck: timerCheck,
                            success: success
                        });

                        console.log(`${success ? '‚úÖ' : '‚ùå'} Test result: ${success ? 'PASSED' : 'FAILED'}`);

                    } catch (error) {
                        console.error('‚ùå Test error:', error);
                        results.push({
                            name: testCase.name,
                            error: error.message,
                            success: false
                        });
                    } finally {
                        // Cleanup
                        document.body.removeChild(testElement);
                    }
                });

                const successful = results.filter(r => r.success).length;
                const total = results.length;

                console.log(`\nüìä AppealIdentificationSystem Test Results: ${successful}/${total} tests passed`);

                // Test fingerprint system
                console.log('\nüîë Testing fingerprint generation...');
                const tempElement = document.createElement('div');
                tempElement.className = 'appeal-item';
                tempElement.innerHTML = '<span>Test Client</span><span>Test message content</span>';
                document.body.appendChild(tempElement);

                const fingerprint1 = this.appealIdSystem.createAppealFingerprint(tempElement);
                const fingerprint2 = this.appealIdSystem.createAppealFingerprint(tempElement);

                console.log('üîë Same element generates same fingerprint:', fingerprint1 === fingerprint2 ? '‚úÖ' : '‚ùå');

                document.body.removeChild(tempElement);

                return {
                    results: results,
                    summary: `${successful}/${total} tests passed`,
                    success: successful === total,
                    fingerprintTest: fingerprint1 === fingerprint2
                };
            }
        };
        
        console.log('üõ†Ô∏è Debug interface available at: window.omniAnalyzer');
        console.log('üîß Type "omniAnalyzer.help()" for available commands');
    }

    logCurrentState() {
        console.log('üì∏ Current page state:');
        
        const state = {
            url: window.location.href,
            templateButton: !!document.querySelector('button[data-testid="choose-templates"]'),
            modal: !!document.querySelector('div[data-testid="modal"]'),
            templates: document.querySelectorAll('div[data-testid="reply-template"]').length,
            messageInput: !!document.querySelector('textarea'),
            sendButton: !!document.querySelector('button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]')
        };
        
        console.table(state);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
        const errors = document.querySelectorAll('.error-message, .alert-danger, [role="alert"]');
        if (errors.length > 0) {
            console.log('‚ö†Ô∏è Error messages found on page:', errors.length);
            errors.forEach(err => console.log('  -', err.textContent));
        }
    }

    // ===== DEBOUNCING METHODS =====
    isClickDebounced(elementId) {
        const lastClick = this.clickDebounceMap.get(elementId);
        if (!lastClick) return false;
        
        const timeSinceLastClick = Date.now() - lastClick;
        return timeSinceLastClick < this.debounceDelay;
    }
    
    recordClick(elementId) {
        this.clickDebounceMap.set(elementId, Date.now());
        
        // Clean up old entries to prevent memory leaks
        setTimeout(() => {
            this.clickDebounceMap.delete(elementId);
        }, this.debounceDelay * 2);
    }

    // ===== IMPROVED SYNCHRONIZATION METHODS =====
    requestAppealCheck(source = 'unknown') {
        console.log(`üîÑ Appeal check requested by: ${source}`);
        
        // Prevent rapid consecutive checks
        const now = Date.now();
        if (now - this.appealMonitorSync.lastCheckTime < this.appealMonitorSync.checkDelay) {
            if (!this.appealMonitorSync.pendingCheck) {
                console.log('‚è≥ Batching appeal check request');
                this.appealMonitorSync.pendingCheck = true;
                
                setTimeout(() => {
                    this.appealMonitorSync.pendingCheck = false;
                    this.appealMonitorSync.lastCheckTime = Date.now();
                    this.checkForExistingAppeals();
                }, this.appealMonitorSync.checkDelay);
            }
            return;
        }
        
        this.appealMonitorSync.lastCheckTime = now;
        this.checkForExistingAppeals();
    }
}

// Initialize analyzer
const analyzer = new OmniChatTrafficAnalyzer();

// Expose analyzer globally for improved synchronization
window.omniAnalyzer = analyzer;

// IMPROVED AppealMonitor Integration
if (window.appealMonitor) {
    console.log('üîó AppealMonitor detected - improved synchronization active');
    
    // Replace the old timeout-based approach with event-based
    const originalOnNewAppeal = window.appealMonitor.onNewAppeal;
    window.appealMonitor.onNewAppeal = function(appealInfo) {
        console.log('üì£ AppealMonitor ‚Üí OmniAnalyzer: New appeal notification');
        
        // Call original method
        if (originalOnNewAppeal) {
            originalOnNewAppeal.call(this, appealInfo);
        }
        
        // Request coordinated appeal check
        if (window.omniAnalyzer && window.omniAnalyzer.autoResponseEnabled) {
            window.omniAnalyzer.requestAppealCheck('AppealMonitor');
        }
    };
    
    console.log('‚úÖ Auto-processing ENABLED with improved synchronization');
} else {
    console.log('üìù AppealMonitor not found - using built-in detection only');
}

console.log('‚úÖ OmniChat Traffic Analyzer v4.1 loaded!');
console.log('ü§ñ Template-based auto-response:', analyzer.autoResponseEnabled ? 'ENABLED' : 'DISABLED');
console.log('üö´ Spam prevention: Active (no auto-retry)');
console.log('üîÑ Auto-detection: ENABLED (controlled mode)');
console.log('üîö Anti-duplication: ENHANCED (30s cooldown, processing tracking)');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
setTimeout(() => {
    const modules = [];
    
    if (window.appealMonitor) {
        modules.push('üìä AppealMonitor (controlled mode)');
        
        if (window.appealMonitor.isMonitoring) {
            console.log('‚úÖ AppealMonitor is actively monitoring for new appeals');
        } else {
            console.log('‚ö†Ô∏è AppealMonitor is not monitoring - start with appealMonitor.start()');
        }
    }
    
    if (typeof checkElements === 'function') modules.push('üß™ TestHelper');
    
    if (modules.length > 0) {
        console.log('üîó Available modules:', modules.join(', '));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüì¢ SYSTEM STATUS:');
    console.log('‚úÖ Built-in detection: Active (DOM observer + periodic checks)');
    console.log('‚úÖ AppealMonitor integration: ' + (window.appealMonitor ? 'Available' : 'Not detected'));
    console.log('‚úÖ Auto-response: ' + (analyzer.autoResponseEnabled ? 'ENABLED' : 'DISABLED'));
    console.log('‚úÖ Spam protection: Active');
    
    console.log('\nüí° Main commands:');
    console.log('  omniAnalyzer.help() - All available commands');
    console.log('  omniAnalyzer.getStats() - Current status');
    console.log('  omniAnalyzer.processManual("appealId") - Process specific appeal');
    
    if (window.appealMonitor) {
        console.log('\nüó∫Ô∏è AppealMonitor commands:');
        console.log('  appealMonitor.diagnoseAppeals() - Check page elements');
        console.log('  appealMonitor.quickSendTemplate() - Send template to active appeal');
        console.log('  appealMonitor.start() / appealMonitor.stop() - Control monitoring');
    }

    console.log('\nüß™ Test new features:');
    console.log('  omniAnalyzer.testIdExtraction() - Test appeal ID extraction patterns');
    console.log('  omniAnalyzer.testTimerDetection() - Test timer detection (60s countdown)');
}, 3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏