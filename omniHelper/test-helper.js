// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
console.log('üîç Checking OmniAnalyzer...');
if (window.omniAnalyzer) {
    console.log('‚úÖ OmniAnalyzer found!');
    console.log('üìä Current stats:', omniAnalyzer.getStats());
} else {
    console.error('‚ùå OmniAnalyzer not found! Make sure extension is loaded.');
}

// 2. –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function checkElements() {
    console.log('\nüîç Searching for OmniChat elements...\n');
    
    const elements = {
        templateButton: document.querySelector('button[data-testid="choose-templates"]'),
        modal: document.querySelector('div[data-testid="modal"]'),
        templates: document.querySelectorAll('div[data-testid="reply-template"]'),
        messageInput: document.querySelector('textarea') || document.querySelector('[contenteditable="true"]'),
        sendButton: null
    };
    
    // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendSelectors = [
        'button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
        'button[aria-label*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
        'button[type="submit"]:not([disabled])'
    ];
    
    for (const selector of sendSelectors) {
        elements.sendButton = document.querySelector(selector);
        if (elements.sendButton) break;
    }
    
    console.log('üìã Template button:', elements.templateButton ? '‚úÖ Found' : '‚ùå Not found');
    console.log('üìã Modal window:', elements.modal ? '‚úÖ Visible' : '‚ö†Ô∏è Not visible (will appear on button click)');
    console.log('üìã Templates:', elements.templates.length > 0 ? `‚úÖ ${elements.templates.length} templates` : '‚ö†Ô∏è No templates (open modal first)');
    console.log('üìã Message input:', elements.messageInput ? '‚úÖ Found' : '‚ùå Not found');
    console.log('üìã Send button:', elements.sendButton ? '‚úÖ Found' : '‚ùå Not found');
    
    return elements;
}

// 3. –¢–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —à–∞–±–ª–æ–Ω–æ–≤
async function testOpenModal() {
    console.log('\nüß™ Testing modal opening...\n');
    
    const button = document.querySelector('button[data-testid="choose-templates"]');
    if (!button) {
        console.error('‚ùå Template button not found!');
        return false;
    }
    
    console.log('üëÜ Clicking template button...');
    button.click();
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const modal = document.querySelector('div[data-testid="modal"]');
    const templates = document.querySelectorAll('div[data-testid="reply-template"]');
    
    if (modal && templates.length > 0) {
        console.log('‚úÖ Modal opened successfully!');
        console.log(`üìã Found ${templates.length} templates`);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 —à–∞–±–ª–æ–Ω–∞
        console.log('\nüìù First templates:');
        for (let i = 0; i < Math.min(3, templates.length); i++) {
            const title = templates[i].querySelector('span[data-testid="reply-title"]')?.textContent;
            const text = templates[i].querySelector('div[data-testid="collapsable-text"]')?.textContent;
            console.log(`  ${i + 1}. ${title}`);
            console.log(`     Text: ${text?.substring(0, 60)}...`);
        }
        
        return true;
    } else {
        console.error('‚ùå Failed to open modal or no templates found');
        return false;
    }
}

// 4. –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
async function testSelectTemplate() {
    console.log('\nüß™ Testing template selection...\n');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalOpened = await testOpenModal();
    if (!modalOpened) return false;
    
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
    const templates = document.querySelectorAll('div[data-testid="reply-template"]');
    let targetTemplate = null;
    
    for (const template of templates) {
        const text = template.querySelector('div[data-testid="collapsable-text"]')?.textContent;
        if (text && text.includes('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É')) {
            targetTemplate = template;
            console.log('‚úÖ Found target template with text: "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É"');
            break;
        }
    }
    
    if (!targetTemplate && templates.length > 0) {
        targetTemplate = templates[0];
        console.log('‚ö†Ô∏è Target text not found, using first template');
    }
    
    if (targetTemplate) {
        const title = targetTemplate.querySelector('span[data-testid="reply-title"]')?.textContent;
        console.log(`üëÜ Clicking template: ${title}`);
        
        targetTemplate.click();
        
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç–∞–≤–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
        const messageInput = document.querySelector('textarea') || document.querySelector('[contenteditable="true"]');
        if (messageInput) {
            const currentText = messageInput.value || messageInput.textContent || messageInput.innerText;
            if (currentText) {
                console.log('‚úÖ Template text inserted!');
                console.log(`üìù Text: ${currentText.substring(0, 100)}...`);
                return true;
            }
        }
    }
    
    console.error('‚ùå Failed to select template');
    return false;
}

// 5. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ü–∏–∫–ª–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
async function testFullCycle(sendMessage = false) {
    console.log('\nüîÑ Testing full auto-response cycle...\n');
    console.log('‚ö†Ô∏è Send message:', sendMessage ? 'YES' : 'NO (dry run)');
    
    try {
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('Step 1: Checking elements...');
        const elements = await checkElements();
        
        // –®–∞–≥ 2: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        console.log('\nStep 2: Opening template modal...');
        const button = elements.templateButton || document.querySelector('button[data-testid="choose-templates"]');
        if (!button) throw new Error('Template button not found');
        
        button.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –®–∞–≥ 3: –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
        console.log('\nStep 3: Selecting template...');
        const templates = document.querySelectorAll('div[data-testid="reply-template"]');
        if (templates.length === 0) throw new Error('No templates found');
        
        const firstTemplate = templates[0];
        const templateTitle = firstTemplate.querySelector('span[data-testid="reply-title"]')?.textContent;
        console.log(`Selecting: ${templateTitle}`);
        
        firstTemplate.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
        console.log('\nStep 4: Checking inserted text...');
        const messageInput = document.querySelector('textarea') || document.querySelector('[contenteditable="true"]');
        const insertedText = messageInput?.value || messageInput?.textContent || messageInput?.innerText;
        
        if (insertedText) {
            console.log('‚úÖ Text inserted:', insertedText.substring(0, 100) + '...');
        } else {
            throw new Error('No text inserted');
        }
        
        // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (sendMessage) {
            console.log('\nStep 5: Sending message...');
            const sendButton = document.querySelector('button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]') || 
                              document.querySelector('button[type="submit"]:not([disabled])');
            
            if (sendButton) {
                console.log('‚ö†Ô∏è Ready to send. Button found:', sendButton);
                console.log('üëÜ Clicking send button...');
                sendButton.click();
                console.log('‚úÖ Message sent!');
            } else {
                console.log('‚ùå Send button not found');
            }
        } else {
            console.log('\nStep 5: Skipping send (dry run mode)');
        }
        
        console.log('\n‚úÖ Full cycle test completed successfully!');
        return true;
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        return false;
    }
}

// 6. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('\nüìã Available test commands:\n');
console.log('  checkElements()       - Check all page elements');
console.log('  testOpenModal()       - Test opening template modal');
console.log('  testSelectTemplate()  - Test selecting a template');
console.log('  testFullCycle(false)  - Test full cycle (dry run)');
console.log('  testFullCycle(true)   - Test full cycle with send');
console.log('\nüí° OmniAnalyzer commands:');
console.log('  omniAnalyzer.getStats()           - Get current statistics');
console.log('  omniAnalyzer.testAutoResponse()   - Test auto-response');
console.log('  omniAnalyzer.findTemplateElements() - Find template elements');
console.log('  omniAnalyzer.testFullCycle()      - Test via extension');
console.log('  omniAnalyzer.help()               - Show all commands');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
checkElements();