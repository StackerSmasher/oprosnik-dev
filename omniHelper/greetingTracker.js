// greetingTracker.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
class GreetingTracker {
    constructor() {
        this.greetedChats = new Map();
        this.chatFingerprints = new Map();
        this.initialized = false;
        this.COOLDOWN_PERIOD = 24 * 60 * 60 * 1000;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        this.initSync();
    }

    // –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage
    initSync() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ localStorage (–¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É)
            const stored = localStorage.getItem('greetingTrackerData');
            if (stored) {
                const data = JSON.parse(stored);
                if (data.greetedChats) {
                    Object.entries(data.greetedChats).forEach(([id, info]) => {
                        this.greetedChats.set(id, info);
                    });
                }
                if (data.chatFingerprints) {
                    Object.entries(data.chatFingerprints).forEach(([fp, id]) => {
                        this.chatFingerprints.set(fp, id);
                    });
                }
            }
            this.initialized = true;
            console.log('‚úÖ GreetingTracker initialized (sync) with', this.greetedChats.size, 'greeted chats');
        } catch (error) {
            console.error('Error in sync init:', error);
            this.initialized = true; // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        }
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å chrome.storage
        this.syncWithChromeStorage();
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å chrome.storage
    async syncWithChromeStorage() {
        try {
            const result = await new Promise(resolve => {
                chrome.storage.local.get(['greetingTrackerData'], resolve);
            });
            
            if (result.greetingTrackerData) {
                const data = result.greetingTrackerData;
                
                // –ú–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É chrome.storage
                if (data.greetedChats) {
                    Object.entries(data.greetedChats).forEach(([id, info]) => {
                        if (!this.greetedChats.has(id) || info.timestamp > this.greetedChats.get(id).timestamp) {
                            this.greetedChats.set(id, info);
                        }
                    });
                }
                
                console.log('üì• Synced with chrome.storage:', this.greetedChats.size, 'total greetings');
            }
        } catch (error) {
            console.error('Error syncing with chrome.storage:', error);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    wasGreeted(element, appealId) {
        if (!appealId) return false;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID
        const normalizedId = this.normalizeAppealId(appealId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π ID
        if (this.greetedChats.has(normalizedId)) {
            const info = this.greetedChats.get(normalizedId);
            const age = Date.now() - info.timestamp;
            if (age < this.COOLDOWN_PERIOD) {
                console.log(`üö´ Chat ${normalizedId} was greeted ${Math.round(age/1000/60)} minutes ago`);
                return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º fingerprints
        const fingerprints = this.generateFingerprints(element, normalizedId);
        for (const fp of fingerprints) {
            if (this.chatFingerprints.has(fp)) {
                const chatId = this.chatFingerprints.get(fp);
                const info = this.greetedChats.get(chatId);
                if (info && Date.now() - info.timestamp < this.COOLDOWN_PERIOD) {
                    console.log(`üö´ Chat identified by fingerprint ${fp} was greeted`);
                    return true;
                }
            }
        }
        
        return false;
    }

    // –ù–û–í–û–ï: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID
    normalizeAppealId(appealId) {
        if (!appealId) return null;
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã TEMP_ –∏ stable_
        let normalized = appealId.toString()
            .replace(/^TEMP_.*?_/, '')
            .replace(/^stable_/, '')
            .replace(/^#/, '')
            .trim();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        const numMatch = normalized.match(/\d{5,}/);
        if (numMatch) {
            return numMatch[0];
        }
        
        return normalized;
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è fingerprints
    generateFingerprints(element, appealId) {
        const fingerprints = new Set();
        const normalizedId = this.normalizeAppealId(appealId);
        
        if (normalizedId) {
            fingerprints.add(`id:${normalizedId}`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º fingerprint –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (element) {
            const text = element.textContent || '';
            const nameMatch = text.match(/[–ê-–ØA-Z][–∞-—èa-z]+ [–ê-–ØA-Z]\.[–ê-–ØA-Z]\./);
            if (nameMatch) {
                fingerprints.add(`name:${nameMatch[0].toLowerCase()}`);
            }
        }
        
        return Array.from(fingerprints);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    async markAsGreeted(element, appealId, messageText = '') {
        const normalizedId = this.normalizeAppealId(appealId);
        if (!normalizedId) return;
        
        const fingerprints = this.generateFingerprints(element, normalizedId);
        const timestamp = Date.now();
        
        const greetingInfo = {
            timestamp,
            messageText,
            fingerprints
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        this.greetedChats.set(normalizedId, greetingInfo);
        fingerprints.forEach(fp => {
            this.chatFingerprints.set(fp, normalizedId);
        });
        
        // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –û–ë–ê —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await this.saveToStorages();
        
        console.log(`‚úÖ Marked ${normalizedId} as greeted with ${fingerprints.length} fingerprints`);
    }

    // –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–±–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    async saveToStorages() {
        const data = {
            greetedChats: Object.fromEntries(this.greetedChats),
            chatFingerprints: Object.fromEntries(this.chatFingerprints),
            lastSaved: Date.now()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
        localStorage.setItem('greetingTrackerData', JSON.stringify(data));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ chrome.storage (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        return new Promise((resolve) => {
            chrome.storage.local.set({ greetingTrackerData: data }, () => {
                console.log('üíæ GreetingTracker data saved to both storages');
                resolve();
            });
        });
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanup() {
        const now = Date.now();
        let cleaned = 0;
        
        for (const [chatId, info] of this.greetedChats.entries()) {
            if (now - info.timestamp > this.COOLDOWN_PERIOD) {
                this.greetedChats.delete(chatId);
                if (info.fingerprints) {
                    info.fingerprints.forEach(fp => {
                        this.chatFingerprints.delete(fp);
                    });
                }
                cleaned++;
            }
        }
        
        if (cleaned > 0) {
            console.log(`üßπ Cleaned ${cleaned} old greetings`);
            this.saveToStorages();
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.greetingTracker = new GreetingTracker();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
    window.greetingTracker.cleanup();
}, 30 * 60 * 1000);