// greetingTracker.js - –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
class GreetingTracker {
    constructor() {
        this.greetedChats = new Map(); // chatId -> {timestamp, messageText, fingerprints}
        this.chatFingerprints = new Map(); // fingerprint -> chatId
        this.networkAppealIds = new Map(); // url/request -> appealId (–∫—ç—à –∏–∑ network –∑–∞–ø—Ä–æ—Å–æ–≤)
        this.initialized = false;
        this.COOLDOWN_PERIOD = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.initializationPromise = null;
        this.pendingChecks = new Map(); // appealId -> {resolve, reject, timestamp}

        this.init();
        this.setupNetworkMonitoring();
    }

    async init() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.initializationPromise = this._performInitialization();
        try {
            await this.initializationPromise;
        } catch (error) {
            console.error('‚ùå GreetingTracker initialization failed:', error);
        }
    }

    async _performInitialization() {
        console.log('üîÑ GreetingTracker: Starting initialization...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ storage
        const data = await this.loadFromStorage();
        if (data.greetedChats) {
            Object.entries(data.greetedChats).forEach(([id, info]) => {
                this.greetedChats.set(id, info);
            });
        }
        if (data.chatFingerprints) {
            Object.entries(data.chatFingerprints).forEach(([fp, id]) => {
                this.chatFingerprints.set(fp, id);
            });
        }

        this.initialized = true;
        console.log('‚úÖ GreetingTracker initialized with', this.greetedChats.size, 'greeted chats');

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        this._processPendingChecks();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    _processPendingChecks() {
        console.log(`üîÑ Processing ${this.pendingChecks.size} pending greeting checks...`);

        this.pendingChecks.forEach((checkInfo, appealId) => {
            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                const result = this._performGreetingCheck(checkInfo.element, appealId);
                checkInfo.resolve(result);
            } catch (error) {
                console.error(`‚ùå Error processing pending check for ${appealId}:`, error);
                checkInfo.reject(error);
            }
        });

        this.pendingChecks.clear();
        console.log('‚úÖ All pending checks processed');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ network –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Appeal ID
    setupNetworkMonitoring() {
        console.log('üîß Setting up network monitoring for Appeal IDs...');

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Fetch API
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const response = await originalFetch.apply(this, args);
            this._analyzeNetworkResponse(args[0], response.clone());
            return response;
        };

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ XMLHttpRequest
        const originalXHROpen = XMLHttpRequest.prototype.open;
        const originalXHRSend = XMLHttpRequest.prototype.send;

        XMLHttpRequest.prototype.open = function(method, url, ...rest) {
            this._greetingTracker_url = url;
            this._greetingTracker_method = method;
            return originalXHROpen.call(this, method, url, ...rest);
        };

        XMLHttpRequest.prototype.send = function(data) {
            this.addEventListener('load', () => {
                if (this.status >= 200 && this.status < 300) {
                    window.greetingTracker._analyzeXHRResponse(this);
                }
            });
            return originalXHRSend.call(this, data);
        };

        console.log('‚úÖ Network monitoring setup complete');
    }

    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ Fetch API
    async _analyzeNetworkResponse(url, response) {
        try {
            const urlString = typeof url === 'string' ? url : url.url;

            // –ò—â–µ–º Appeal ID –≤ URL
            this._extractAppealIdFromUrl(urlString);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
            if (response.headers.get('content-type')?.includes('application/json')) {
                const data = await response.json();
                this._extractAppealIdFromData(urlString, data);
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
    }

    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ XMLHttpRequest
    _analyzeXHRResponse(xhr) {
        try {
            const url = xhr._greetingTracker_url;
            if (!url) return;

            // –ò—â–µ–º Appeal ID –≤ URL
            this._extractAppealIdFromUrl(url);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
            if (xhr.getResponseHeader('content-type')?.includes('application/json')) {
                try {
                    const data = JSON.parse(xhr.responseText);
                    this._extractAppealIdFromData(url, data);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Appeal ID –∏–∑ URL
    _extractAppealIdFromUrl(url) {
        const appealIdPatterns = [
            /[?&]appealId=(\d{5,})/i,
            /[?&]appeal_id=(\d{5,})/i,
            /[?&]id=(\d{5,})/i,
            /\/appeals?\/(\d{5,})/i,
            /\/appeal[_-]?(\d{5,})/i,
            /\/(\d{6,})\//,  // –ß–∏—Å–ª–∞ –æ—Ç 6 —Ü–∏—Ñ—Ä –≤ –ø—É—Ç–∏
            /appealId[=:](\d{5,})/i,
            /ticketId[=:](\d{5,})/i,
            /requestId[=:](\d{5,})/i
        ];

        for (const pattern of appealIdPatterns) {
            const match = url.match(pattern);
            if (match && match[1]) {
                const appealId = match[1];
                this.networkAppealIds.set(url, appealId);
                this.networkAppealIds.set(window.location.href, appealId); // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                console.log(`üì° Found Appeal ID ${appealId} in URL: ${url}`);
                return appealId;
            }
        }
        return null;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Appeal ID –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
    _extractAppealIdFromData(url, data) {
        const appealId = this._recursivelySearchAppealId(data);
        if (appealId) {
            this.networkAppealIds.set(url, appealId);
            this.networkAppealIds.set(window.location.href, appealId);
            console.log(`üì° Found Appeal ID ${appealId} in response data from: ${url}`);
            return appealId;
        }
        return null;
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ Appeal ID –≤ –æ–±—ä–µ–∫—Ç–µ/–º–∞—Å—Å–∏–≤–µ
    _recursivelySearchAppealId(obj, maxDepth = 3, currentDepth = 0) {
        if (currentDepth > maxDepth || !obj) return null;

        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤
        if (typeof obj === 'string' || typeof obj === 'number') {
            const str = obj.toString();
            if (/^\d{5,}$/.test(str)) {
                return str;
            }
            return null;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤
        if (typeof obj === 'object') {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫–ª—é—á–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å Appeal ID
            const appealKeys = [
                'appealId', 'appeal_id', 'id', 'ticketId', 'ticket_id',
                'requestId', 'request_id', 'caseId', 'case_id', 'number',
                'appealNumber', 'ticketNumber', 'requestNumber'
            ];

            for (const key of appealKeys) {
                if (obj.hasOwnProperty(key)) {
                    const value = obj[key];
                    if (value && /^\d{5,}$/.test(value.toString())) {
                        return value.toString();
                    }
                }
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const result = this._recursivelySearchAppealId(obj[key], maxDepth, currentDepth + 1);
                    if (result) return result;
                }
            }
        }

        return null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Appeal ID –∏–∑ –∫—ç—à–∞ network –∑–∞–ø—Ä–æ—Å–æ–≤
    getAppealIdFromNetwork() {
        const currentUrl = window.location.href;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º URL
        if (this.networkAppealIds.has(currentUrl)) {
            const appealId = this.networkAppealIds.get(currentUrl);
            console.log(`üì° Retrieved Appeal ID ${appealId} from network cache (current URL)`);
            return appealId;
        }

        // –ò—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö URL
        for (const [url, appealId] of this.networkAppealIds.entries()) {
            if (currentUrl.includes(appealId) || url.includes(window.location.pathname)) {
                console.log(`üì° Retrieved Appeal ID ${appealId} from network cache (URL match)`);
                return appealId;
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π Appeal ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const lastAppealId = Array.from(this.networkAppealIds.values()).pop();
        if (lastAppealId) {
            console.log(`üì° Using last known Appeal ID ${lastAppealId} from network cache`);
            return lastAppealId;
        }

        return null;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
    _performGreetingCheck(element, appealId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π ID
        if (appealId && this.greetedChats.has(appealId)) {
            const info = this.greetedChats.get(appealId);
            const age = Date.now() - info.timestamp;
            if (age < this.COOLDOWN_PERIOD) {
                console.log(`üö´ Chat ${appealId} was greeted ${Math.round(age/1000/60)} minutes ago`);
                return true;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ fingerprints
        const fingerprints = this.generateFingerprints(element, appealId);
        for (const fp of fingerprints) {
            if (this.chatFingerprints.has(fp)) {
                const chatId = this.chatFingerprints.get(fp);
                const info = this.greetedChats.get(chatId);
                if (info && Date.now() - info.timestamp < this.COOLDOWN_PERIOD) {
                    console.log(`üö´ Chat identified by fingerprint ${fp} was greeted`);
                    return true;
                }
            }
        }

        return false;
    }

    // –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ fingerprints –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
    generateFingerprints(element, appealId) {
        const fingerprints = new Set();

        // 1. –û—Å–Ω–æ–≤–Ω–æ–π ID (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        if (appealId) {
            fingerprints.add(`id:${appealId}`);
            // –í–∞—Ä–∏–∞–Ω—Ç—ã ID
            fingerprints.add(`id:${appealId.replace(/^#/, '')}`);
            fingerprints.add(`id:#${appealId.replace(/^#/, '')}`);
        }

        // 2. Appeal ID –∏–∑ network –∑–∞–ø—Ä–æ—Å–æ–≤ (–ù–û–í–û–ï)
        const networkAppealId = this.getAppealIdFromNetwork();
        if (networkAppealId && networkAppealId !== appealId) {
            fingerprints.add(`id:${networkAppealId}`);
            fingerprints.add(`network:${networkAppealId}`);
            console.log(`üì° Added network Appeal ID ${networkAppealId} to fingerprints`);
        }

        // 3. –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const nameElement = element?.querySelector('.sc-hSWyVn.jLoqEI, [title]');
        const clientName = nameElement?.textContent?.trim() || nameElement?.getAttribute('title');
        if (clientName) {
            fingerprints.add(`name:${clientName.toLowerCase()}`);
        }

        // 4. URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ID)
        const url = window.location.href;
        const urlMatch = url.match(/appeal[Id]*=(\d+)/i);
        if (urlMatch) {
            fingerprints.add(`url:${urlMatch[1]}`);
        }

        // 5. Data attributes
        const dataAppealId = element?.dataset?.appealId || element?.dataset?.appealid;
        if (dataAppealId) {
            fingerprints.add(`data:${dataAppealId}`);
        }

        // 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ DOM (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        if (element) {
            // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            const text = element.textContent || '';
            const textPatterns = [
                /–û–±—Ä–∞—â–µ–Ω–∏–µ\s*‚Ññ\s*(\d{5,})/i,
                /Appeal[:\s#‚Ññ]+(\d{5,})/i,
                /#(\d{6,})/,
                /ID[:\s]+(\d{5,})/i,
                /‚Ññ\s*(\d{6,})/
            ];

            for (const pattern of textPatterns) {
                const match = text.match(pattern);
                if (match && match[1]) {
                    fingerprints.add(`text:${match[1]}`);
                    fingerprints.add(`id:${match[1]}`);
                }
            }
        }

        return Array.from(fingerprints);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    wasGreeted(element, appealId) {
        // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (this.initialized) {
            return this._performGreetingCheck(element, appealId);
        }

        // –ù–û–í–û–ï: –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
        console.log('‚è≥ GreetingTracker not initialized yet, waiting...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        if (this.pendingChecks.has(appealId)) {
            console.log(`‚è≠Ô∏è Check for ${appealId} already pending`);
            return true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        this.pendingChecks.set(appealId, {
            element: element,
            resolve: () => {},
            reject: () => {},
            timestamp: Date.now()
        });

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–Ω–µ—Ç
        setTimeout(() => {
            if (this.pendingChecks.has(appealId)) {
                console.warn(`‚ö†Ô∏è Initialization timeout for ${appealId}, falling back to safe mode`);
                this.pendingChecks.delete(appealId);
            }
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        // –ö–†–ò–¢–ò–ß–ù–û: –í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)
        console.log(`üîí Appeal ${appealId} blocked until initialization completes (with 10s timeout)`);
        return true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∂–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    async wasGreetedAsync(element, appealId) {
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!this.initialized && this.initializationPromise) {
            console.log('‚è≥ Waiting for GreetingTracker initialization...');
            await this.initializationPromise;
        }

        // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        return this._performGreetingCheck(element, appealId);
    }

    // –û—Ç–º–µ—á–∞–µ—Ç —á–∞—Ç –∫–∞–∫ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π
    async markAsGreeted(element, appealId, messageText = '') {
        const fingerprints = this.generateFingerprints(element, appealId);
        const timestamp = Date.now();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
        const greetingInfo = {
            timestamp,
            messageText,
            fingerprints
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º ID
        this.greetedChats.set(appealId, greetingInfo);

        // –°–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ fingerprints —Å —ç—Ç–∏–º ID
        fingerprints.forEach(fp => {
            this.chatFingerprints.set(fp, appealId);
        });

        // –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        await this.saveToStorage();

        console.log(`‚úÖ Marked ${appealId} as greeted with ${fingerprints.length} fingerprints`);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ storage
    async saveToStorage() {
        const data = {
            greetedChats: Object.fromEntries(this.greetedChats),
            chatFingerprints: Object.fromEntries(this.chatFingerprints),
            lastSaved: Date.now()
        };

        return new Promise((resolve) => {
            chrome.storage.local.set({ greetingTrackerData: data }, () => {
                console.log('üíæ GreetingTracker data saved');
                resolve();
            });
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ storage
    async loadFromStorage() {
        return new Promise((resolve) => {
            chrome.storage.local.get(['greetingTrackerData'], (result) => {
                resolve(result.greetingTrackerData || {});
            });
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanup() {
        const now = Date.now();
        let cleaned = 0;

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        for (const [chatId, info] of this.greetedChats.entries()) {
            if (now - info.timestamp > this.COOLDOWN_PERIOD) {
                this.greetedChats.delete(chatId);
                // –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ fingerprints
                if (info.fingerprints) {
                    info.fingerprints.forEach(fp => {
                        this.chatFingerprints.delete(fp);
                    });
                }
                cleaned++;
            }
        }

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ network –∫—ç—à–∏
        let networkCleaned = 0;
        for (const [url] of this.networkAppealIds.entries()) {
            // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç timestamp –∏–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç–∞—Ä—ã–º
            if (url.includes('timestamp=') || url.includes('_t=') || url.length > 500) {
                this.networkAppealIds.delete(url);
                networkCleaned++;
            }
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä network –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π)
        if (this.networkAppealIds.size > 100) {
            const entries = Array.from(this.networkAppealIds.entries());
            const toDelete = entries.slice(0, entries.length - 100);
            toDelete.forEach(([url]) => this.networkAppealIds.delete(url));
            networkCleaned += toDelete.length;
        }

        if (cleaned > 0 || networkCleaned > 0) {
            console.log(`üßπ Cleaned ${cleaned} old greetings and ${networkCleaned} network cache entries`);
            this.saveToStorage();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ network monitoring)
    getDebugInfo() {
        return {
            initialized: this.initialized,
            greetedChatsCount: this.greetedChats.size,
            chatFingerprints: this.chatFingerprints.size,
            networkAppealIds: this.networkAppealIds.size,
            networkAppealIdsList: Array.from(this.networkAppealIds.entries()).map(([url, id]) => ({
                url: url.length > 100 ? url.substring(0, 100) + '...' : url,
                appealId: id
            })),
            greetedChats: Array.from(this.greetedChats.entries()).map(([id, info]) => ({
                id,
                timestamp: new Date(info.timestamp).toLocaleString(),
                ageMinutes: Math.round((Date.now() - info.timestamp) / 1000 / 60),
                fingerprintsCount: info.fingerprints?.length || 0
            }))
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è network cache)
    clearAll() {
        this.greetedChats.clear();
        this.chatFingerprints.clear();
        this.networkAppealIds.clear();

        chrome.storage.local.remove(['greetingTrackerData']);

        console.log('üßπ All greeting and network data cleared');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.greetingTracker = new GreetingTracker();