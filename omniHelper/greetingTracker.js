// greetingTracker.js - –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
class GreetingTracker {
    constructor() {
        this.greetedChats = new Map(); // chatId -> {timestamp, messageText, fingerprints}
        this.chatFingerprints = new Map(); // fingerprint -> chatId
        this.initialized = false;
        this.COOLDOWN_PERIOD = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

        this.init();
    }

    async init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ storage
        const data = await this.loadFromStorage();
        if (data.greetedChats) {
            Object.entries(data.greetedChats).forEach(([id, info]) => {
                this.greetedChats.set(id, info);
            });
        }
        if (data.chatFingerprints) {
            Object.entries(data.chatFingerprints).forEach(([fp, id]) => {
                this.chatFingerprints.set(fp, id);
            });
        }
        this.initialized = true;
        console.log('‚úÖ GreetingTracker initialized with', this.greetedChats.size, 'greeted chats');
    }

    // –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ fingerprints –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
    generateFingerprints(element, appealId) {
        const fingerprints = new Set();

        // 1. –û—Å–Ω–æ–≤–Ω–æ–π ID (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        if (appealId) {
            fingerprints.add(`id:${appealId}`);
            // –í–∞—Ä–∏–∞–Ω—Ç—ã ID
            fingerprints.add(`id:${appealId.replace(/^#/, '')}`);
            fingerprints.add(`id:#${appealId.replace(/^#/, '')}`);
        }

        // 2. –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const nameElement = element.querySelector('.sc-hSWyVn.jLoqEI, [title]');
        const clientName = nameElement?.textContent?.trim() || nameElement?.getAttribute('title');
        if (clientName) {
            fingerprints.add(`name:${clientName.toLowerCase()}`);
        }

        // 3. URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ID)
        const url = window.location.href;
        const urlMatch = url.match(/appeal[Id]*=(\d+)/i);
        if (urlMatch) {
            fingerprints.add(`url:${urlMatch[1]}`);
        }

        // 4. Data attributes
        const dataAppealId = element.dataset?.appealId || element.dataset?.appealid;
        if (dataAppealId) {
            fingerprints.add(`data:${dataAppealId}`);
        }

        return Array.from(fingerprints);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    wasGreeted(element, appealId) {
        if (!this.initialized) {
            console.log('‚è≥ GreetingTracker not initialized yet');
            return true; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º - –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π ID
        if (appealId && this.greetedChats.has(appealId)) {
            const info = this.greetedChats.get(appealId);
            const age = Date.now() - info.timestamp;
            if (age < this.COOLDOWN_PERIOD) {
                console.log(`üö´ Chat ${appealId} was greeted ${Math.round(age/1000/60)} minutes ago`);
                return true;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ fingerprints
        const fingerprints = this.generateFingerprints(element, appealId);
        for (const fp of fingerprints) {
            if (this.chatFingerprints.has(fp)) {
                const chatId = this.chatFingerprints.get(fp);
                const info = this.greetedChats.get(chatId);
                if (info && Date.now() - info.timestamp < this.COOLDOWN_PERIOD) {
                    console.log(`üö´ Chat identified by fingerprint ${fp} was greeted`);
                    return true;
                }
            }
        }

        return false;
    }

    // –û—Ç–º–µ—á–∞–µ—Ç —á–∞—Ç –∫–∞–∫ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π
    async markAsGreeted(element, appealId, messageText = '') {
        const fingerprints = this.generateFingerprints(element, appealId);
        const timestamp = Date.now();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
        const greetingInfo = {
            timestamp,
            messageText,
            fingerprints
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º ID
        this.greetedChats.set(appealId, greetingInfo);

        // –°–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ fingerprints —Å —ç—Ç–∏–º ID
        fingerprints.forEach(fp => {
            this.chatFingerprints.set(fp, appealId);
        });

        // –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        await this.saveToStorage();

        console.log(`‚úÖ Marked ${appealId} as greeted with ${fingerprints.length} fingerprints`);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ storage
    async saveToStorage() {
        const data = {
            greetedChats: Object.fromEntries(this.greetedChats),
            chatFingerprints: Object.fromEntries(this.chatFingerprints),
            lastSaved: Date.now()
        };

        return new Promise((resolve) => {
            chrome.storage.local.set({ greetingTrackerData: data }, () => {
                console.log('üíæ GreetingTracker data saved');
                resolve();
            });
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ storage
    async loadFromStorage() {
        return new Promise((resolve) => {
            chrome.storage.local.get(['greetingTrackerData'], (result) => {
                resolve(result.greetingTrackerData || {});
            });
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanup() {
        const now = Date.now();
        let cleaned = 0;

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        for (const [chatId, info] of this.greetedChats.entries()) {
            if (now - info.timestamp > this.COOLDOWN_PERIOD) {
                this.greetedChats.delete(chatId);
                // –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ fingerprints
                if (info.fingerprints) {
                    info.fingerprints.forEach(fp => {
                        this.chatFingerprints.delete(fp);
                    });
                }
                cleaned++;
            }
        }

        if (cleaned > 0) {
            console.log(`üßπ Cleaned ${cleaned} old greetings`);
            this.saveToStorage();
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.greetingTracker = new GreetingTracker();