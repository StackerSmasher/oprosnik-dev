class AppealMonitor {
    constructor() {
        this.appeals = new Map();
        this.isMonitoring = false;
        this.checkInterval = null;
        
        console.log('üìä Appeal Monitor initialized');
    }
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    start() {
        if (this.isMonitoring) {
            console.log('‚ö†Ô∏è Monitor already running');
            return;
        }
        
        this.isMonitoring = true;
        console.log('üü¢ Monitor started');
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        this.checkForAppeals();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (—É–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É)
        this.checkInterval = setInterval(() => {
            this.checkForAppeals();
        }, 10000);
        
        // –¢–∞–∫–∂–µ —Å–ª—É—à–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        this.interceptNetwork();
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stop() {
        if (!this.isMonitoring) {
            console.log('‚ö†Ô∏è Monitor not running');
            return;
        }
        
        this.isMonitoring = false;
        clearInterval(this.checkInterval);
        console.log('üî¥ Monitor stopped');
    }
    
    // –ü–æ–∏—Å–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ª–µ–≤–æ–º –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
    findAppealsInSidebar() {
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã OmniChat
        const specificSelectors = [
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π
            '[data-testid="appeal-preview"]',
            '#scroll-box-root [data-testid="appeal-preview"]',
            '.sc-dUHDFv.diHQGp',
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            '#scroll-box-root > div',
            '.sc-iLXxbI.hFnklZ [data-testid="appeal-preview"]',
        ];

        let sidebarAppeals = [];
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        for (const selector of specificSelectors) {
            try {
                const elements = document.querySelectorAll(selector);
                if (elements.length > 0) {
                    console.log(`‚úÖ Found ${elements.length} elements with selector: ${selector}`);
                    sidebarAppeals.push(...Array.from(elements));
                }
            } catch (e) {
                console.log(`‚ö†Ô∏è Error with selector ${selector}:`, e.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
        if (sidebarAppeals.length === 0) {
            console.log('üîç Using fallback search...');
            
            const fallbackSelectors = [
                // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
                '#scroll-box-root div[class*="sc-"]',
                '[class*="hFnklZ"] > div',
                '[class*="diHQGp"]',
                // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –±–æ–∫–æ–≤—ã—Ö –º–µ–Ω—é
                '.sidebar [class*="appeal"]',
                '.left-panel [class*="chat"]',
                '[role="listitem"]'
            ];
            
            for (const selector of fallbackSelectors) {
                try {
                    const elements = document.querySelectorAll(selector);
                    const validElements = Array.from(elements).filter(element => {
                        const rect = element.getBoundingClientRect();
                        const style = window.getComputedStyle(element);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
                        return rect.width > 50 && 
                               rect.height > 50 && 
                               style.display !== 'none' && 
                               style.visibility !== 'hidden' &&
                               rect.left < window.innerWidth * 0.5; // –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
                    });
                    
                    if (validElements.length > 0) {
                        console.log(`üìã Fallback found ${validElements.length} elements with: ${selector}`);
                        sidebarAppeals.push(...validElements);
                        break; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –æ–±—Ä–∞—â–µ–Ω–∏—è
        sidebarAppeals = [...new Set(sidebarAppeals)].slice(0, 3);
        
        console.log(`üìã Final result: Found ${sidebarAppeals.length} appeals in sidebar`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        sidebarAppeals.forEach((element, index) => {
            const rect = element.getBoundingClientRect();
            const testId = element.getAttribute('data-testid');
            const className = element.className;
            console.log(`  ${index + 1}. Element: testid="${testId}" class="${className.substring(0, 50)}..." size=${rect.width}x${rect.height}`);
        });
        
        return sidebarAppeals;
    }

    // –ü–æ–∏—Å–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    checkForAppeals() {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
        const sidebarAppeals = this.findAppealsInSidebar();
        
        // –ó–∞—Ç–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const selectors = [
            '[data-appeal-id]',
            '[data-appealid]',
            '.appeal-item',
            '.chat-item',
            '.dialog-item',
            '.conversation-item',
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —á–∞—Ç–æ–≤
            '.chat-list-item',
            '.message-list-item',
            '[role="listitem"]',
            // –ü–æ –∫–ª–∞—Å—Å–∞–º
            '[class*="appeal"]',
            '[class*="chat-item"]',
            '[class*="dialog"]'
        ];
        
        let foundElements = [...sidebarAppeals]; // –ù–∞—á–∏–Ω–∞–µ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        
        for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            if (elements.length > 0) {
                foundElements.push(...elements);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        foundElements = [...new Set(foundElements)];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        foundElements.forEach(element => {
            const appealInfo = this.extractAppealInfo(element);
            if (appealInfo && appealInfo.id) {
                // –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
                appealInfo.fromSidebar = sidebarAppeals.includes(element);
                
                if (!this.appeals.has(appealInfo.id)) {
                    // –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!
                    this.appeals.set(appealInfo.id, appealInfo);
                    console.log('üÜï New appeal detected:', appealInfo.id, 'Status:', appealInfo.status);
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ onNewAppeal —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
                    if (appealInfo.status === 'new') {
                        this.onNewAppeal(appealInfo);
                        
                        // Note: OmniAnalyzer synchronization is now handled through 
                        // method override in content.js for better coordination
                    }
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    const existing = this.appeals.get(appealInfo.id);
                    if (existing.status !== appealInfo.status) {
                        console.log('üîÑ Appeal status changed:', appealInfo.id, existing.status, '->', appealInfo.status);
                    }
                    this.appeals.set(appealInfo.id, appealInfo);
                }
            }
        });
        
        if (foundElements.length === 0 && this.appeals.size === 0) {
            console.log('üëÄ No appeals found on page');
        }
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    extractAppealInfo(element) {
        const info = {
            id: null,
            name: null,
            text: null,
            status: 'unknown',
            timestamp: Date.now(),
            element: element,
            timer: null
        };

        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
        const allText = element.textContent || '';
        const appealPatterns = [
            /–û–±—Ä–∞—â–µ–Ω–∏–µ\s*‚Ññ\s*(\d+)/i,        // "–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ 123456"
            /–û–±—Ä–∞—â–µ–Ω–∏–µ[:\s#]+(\d+)/i,        // "–û–±—Ä–∞—â–µ–Ω–∏–µ: 123456" –∏–ª–∏ "–û–±—Ä–∞—â–µ–Ω–∏–µ #123456"
            /Appeal[:\s#‚Ññ]+(\d+)/i,          // "Appeal: 123456" –∏–ª–∏ "Appeal ‚Ññ 123456"
            /#(\d{5,})/,                     // "#123456" (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)
            /ID[:\s]+(\d+)/i,                // "ID: 123456"
            /‚Ññ\s*(\d{5,})/                   // "‚Ññ 123456" (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)
        ];

        for (const pattern of appealPatterns) {
            const match = allText.match(pattern);
            if (match) {
                info.id = match[1];
                console.log('‚úÖ Found appeal ID in text:', info.id);
                break;
            }
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: Data-–∞—Ç—Ä–∏–±—É—Ç—ã
        if (!info.id) {
            info.id = element.dataset?.appealId ||
                     element.dataset?.appealid ||
                     element.getAttribute('data-appeal-id') ||
                     element.getAttribute('data-dialog-id');
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ–∏—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        if (!info.id) {
            const childElements = element.querySelectorAll('*');
            for (const child of childElements) {
                const childText = child.textContent || '';
                for (const pattern of appealPatterns) {
                    const match = childText.match(pattern);
                    if (match) {
                        info.id = match[1];
                        console.log('‚úÖ Found appeal ID in child element:', info.id);
                        break;
                    }
                }
                if (info.id) break;
            }
        }

        // –ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ HTML
        const timerContainer = element.querySelector('.sc-cewOZc.ioQCCB span') ||
                              element.querySelector('div[class*="sc-cewOZc"] span') ||
                              element.querySelector('span:contains("—Å–µ–∫")');

        if (timerContainer) {
            const timerText = timerContainer.textContent || '';
            const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                const seconds = parseInt(timerMatch[1]);
                if (seconds < 60) {
                    info.timer = seconds;
                    console.log('‚è∞ AppealMonitor: Found timer in specific structure:', seconds, 'seconds');
                }
            }
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
        if (!info.timer) {
            const timerPatterns = [
                /(\d+)\s*—Å–µ–∫/i,                 // "45 —Å–µ–∫", "30 —Å–µ–∫"
                /(\d{1,2})\s*—Å\b/i,             // "45—Å", "59 —Å" (–Ω–æ –Ω–µ "792—Å")
                /(\d{1,2})\s*sec/i,             // "45sec"
                /0:(\d{2})/,                    // "0:45"
            ];

            for (const pattern of timerPatterns) {
                const match = allText.match(pattern);
                if (match) {
                    const seconds = parseInt(match[1]);
                    if (seconds < 60) {
                        info.timer = seconds;
                        console.log('‚è∞ AppealMonitor: Found timer in text:', seconds, 'seconds');
                        break;
                    }
                }
            }
        }

        // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-testid="appeal-preview"
        if (element.getAttribute('data-testid') === 'appeal-preview') {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –∫–∞–∫ ID)
            const nameElement = element.querySelector('.sc-hSWyVn.jLoqEI, [title]');
            if (nameElement) {
                info.name = nameElement.textContent?.trim() || nameElement.getAttribute('title');
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageElement = element.querySelector('.sc-mYtaj.hfzSXm');
            if (messageElement) {
                info.text = messageElement.textContent?.trim();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–µ–π–¥–∂–∞ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –ò–õ–ò —Ç–∞–π–º–µ—Ä–∞
            const badge = element.querySelector('[data-testid="badge"], [data-testid="dot"]');
            if (badge || info.timer) {
                info.status = 'new';
                if (info.timer) {
                    console.log('üî• Appeal has timer - marking as new:', info.timer, 'seconds');
                }
            } else {
                info.status = 'read';
            }
        } else {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            info.text = element.textContent?.trim().substring(0, 100);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–æ–≤—ã–π/–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π) - –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–π–º–µ—Ä–∞
            const isNew = this.isNewAppeal(element) || info.timer;
            info.status = isNew ? 'new' : 'read';
        }

        // –ü–û–°–õ–ï–î–ù–ò–ô –†–ï–°–£–†–°: –ï—Å–ª–∏ ID –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!info.id) {
            // –ò—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä
            const numericMatch = allText.match(/\b(\d{5,})\b/);
            if (numericMatch) {
                info.id = numericMatch[1];
                console.log('‚ö†Ô∏è Using numeric ID as fallback:', info.id);
            } else {
                // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É
                info.id = info.name?.replace(/\s+/g, '_') || `appeal_${Date.now()}`;
                console.log('‚ö†Ô∏è No ID found, using name-based ID:', info.id);
            }
        }

        return info;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º
    isNewAppeal(element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!) - –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä –ú–ï–ù–¨–®–ï 60 —Å–µ–∫—É–Ω–¥

        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–π–º–µ—Ä–∞
        const timerContainer = element.querySelector('.sc-cewOZc.ioQCCB span') ||
                              element.querySelector('div[class*="sc-cewOZc"] span') ||
                              element.querySelector('span:contains("—Å–µ–∫")');

        if (timerContainer) {
            const timerText = timerContainer.textContent || '';
            const timerMatch = timerText.match(/(\d+)\s*—Å–µ–∫/i);
            if (timerMatch) {
                const seconds = parseInt(timerMatch[1]);
                if (seconds < 60) {
                    console.log('üî• AppealMonitor: Found timer in specific structure - marking as new:', seconds, 'seconds');
                    return true;
                }
            }
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
        const text = element.textContent || '';
        const timerPatterns = [
            /(\d+)\s*—Å–µ–∫/i,                 // "45 —Å–µ–∫", "30 —Å–µ–∫"
            /(\d{1,2})\s*—Å\b/i,             // "45—Å", "59 —Å" (–Ω–æ –Ω–µ "792—Å")
            /(\d{1,2})\s*sec/i,             // "45sec"
            /0:(\d{2})/,                    // "0:45"
        ];

        for (const pattern of timerPatterns) {
            const match = text.match(pattern);
            if (match) {
                const seconds = parseInt(match[1]);
                if (seconds < 60) {
                    console.log('üî• AppealMonitor: Found timer in text - marking as new:', seconds, 'seconds');
                    return true;
                }
            }
        }

        // 2. –ö–ª–∞—Å—Å—ã
        const classList = element.className || '';
        if (classList.includes('unread') ||
            classList.includes('new') ||
            classList.includes('pending') ||
            classList.includes('active')) {
            return true;
        }

        // 3. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
        const unreadIndicators = [
            '.badge',
            '.notification',
            '.unread-indicator',
            '[data-unread="true"]',
            '[data-status="new"]',
            '.new-message'
        ];

        for (const selector of unreadIndicators) {
            if (element.querySelector(selector)) {
                return true;
            }
        }

        // 4. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ (–∂–∏—Ä–Ω—ã–π —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
        const fontWeight = window.getComputedStyle(element).fontWeight;
        if (fontWeight === 'bold' || parseInt(fontWeight) >= 600) {
            return true;
        }

        // 5. –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç (–Ω–æ–≤—ã–µ —á–∞—Å—Ç–æ –≤—ã–¥–µ–ª–µ–Ω—ã)
        const bgColor = window.getComputedStyle(element).backgroundColor;
        if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {
            // –ï—Å—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            return true;
        }

        return false;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    findActiveAppeal() {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        const sidebarAppeals = this.findAppealsInSidebar();
        console.log(`üîç Checking ${sidebarAppeals.length} sidebar appeals for active state`);
        
        for (const element of sidebarAppeals) {
            const classList = element.className || '';
            const style = window.getComputedStyle(element);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–µ–π–¥–∂–∞ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
            const badge = element.querySelector('[data-testid="badge"], [data-testid="dot"]');
            if (badge) {
                console.log('‚úÖ Found active appeal with badge (new message)');
                return element;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (classList.includes('active') || 
                classList.includes('selected') || 
                classList.includes('current') ||
                classList.includes('focused')) {
                console.log('‚úÖ Found active appeal with active class');
                return element;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            if (element.getAttribute('data-active') === 'true' ||
                element.getAttribute('data-selected') === 'true' ||
                element.getAttribute('aria-selected') === 'true') {
                console.log('‚úÖ Found active appeal with active attribute');
                return element;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ (–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω, —Ä–∞–º–∫–∞)
            const bgColor = style.backgroundColor;
            const borderColor = style.borderColor;
            const borderWidth = parseInt(style.borderWidth) || 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º
            if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–∞–∑–æ–≤—ã–π –±–µ–ª—ã–π —Ñ–æ–Ω
                if (!bgColor.includes('255, 255, 255') && !bgColor.includes('rgb(255, 255, 255)')) {
                    console.log('‚úÖ Found active appeal with colored background:', bgColor);
                    return element;
                }
            }
            
            if (borderWidth > 1 && borderColor !== 'rgba(0, 0, 0, 0)') {
                console.log('‚úÖ Found active appeal with border');
                return element;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å –±–µ–π–¥–∂–µ–º
        for (const element of sidebarAppeals) {
            const badge = element.querySelector('[data-testid="badge"], [data-testid="dot"]');
            if (badge) {
                console.log('‚ö†Ô∏è Using first appeal with badge as active');
                return element;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å –±–µ–π–¥–∂–µ–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
        if (sidebarAppeals.length > 0) {
            console.log('‚ö†Ô∏è Using first appeal as active (no clear active indicators)');
            return sidebarAppeals[0];
        }
        
        console.log('‚ùå No active appeal found');
        return null;
    }

    // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è (–∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É)
    selectActiveAppeal() {
        const activeElement = this.findActiveAppeal();
        
        if (!activeElement) {
            console.log('‚ö†Ô∏è No active appeal found to select');
            return null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
        const appealInfo = this.extractAppealInfo(activeElement);
        
        if (!appealInfo || !appealInfo.id) {
            console.log('‚ö†Ô∏è Could not extract appeal info from active element');
            return null;
        }
        
        console.log('üëÜ Clicking on active appeal:', appealInfo.id);
        
        // –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        try {
            activeElement.click();
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
            setTimeout(() => {
                console.log('‚úÖ Appeal selected:', appealInfo.id);
            }, 500);
            
            return appealInfo;
        } catch (error) {
            console.error('‚ùå Error clicking on appeal:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    getSidebarAppeals() {
        const sidebarElements = this.findAppealsInSidebar();
        const appeals = [];
        
        sidebarElements.forEach(element => {
            const appealInfo = this.extractAppealInfo(element);
            if (appealInfo && appealInfo.id) {
                appealInfo.isActive = this.findActiveAppeal() === element;
                appeals.push(appealInfo);
            }
        });
        
        return appeals.slice(0, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—Ä–∞—â–µ–Ω–∏—è
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    onNewAppeal(appealInfo) {
        console.log('üéâ NEW APPEAL DETECTED!');
        console.log('  ID:', appealInfo.id);
        console.log('  Status:', appealInfo.status);
        console.log('  Text preview:', appealInfo.text);
        
        // –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
        // AppealMonitor —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OmniAnalyzer.checkForExistingAppeals()
        
        if (window.omniAnalyzer) {
            console.log('üìù AppealMonitor: New appeal detected, but NOT adding to queue to prevent duplication');
            console.log('    OmniAnalyzer will pick it up during periodic check');
            console.log('    Appeal ID:', appealInfo.id, 'Status:', appealInfo.status);
        } else {
            console.log('‚ö†Ô∏è OmniAnalyzer not available, appeal detection only');
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (appealInfo.element) {
            appealInfo.element.style.border = '2px solid #4CAF50';
            appealInfo.element.style.boxShadow = '0 0 10px rgba(76, 175, 80, 0.5)';
            
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                appealInfo.element.style.border = '';
                appealInfo.element.style.boxShadow = '';
            }, 3000);
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    async sendTemplateToActiveAppeal(templateKeyword = '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', sendMessage = true) {
        console.log('üöÄ Starting automatic template sending for active appeal...');
        
        try {
            // –®–∞–≥ 1: –ù–∞–π—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
            console.log('Step 1: Finding and selecting active appeal...');
            const selectedAppeal = this.selectActiveAppeal();
            
            if (!selectedAppeal) {
                throw new Error('No active appeal found to process');
            }
            
            console.log(`‚úÖ Active appeal selected: ${selectedAppeal.id}`);
            
            // –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –®–∞–≥ 2: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤
            console.log('Step 2: Opening template modal...');
            
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
            const templateButtonSelectors = [
                'button[data-testid="choose-templates"]',
                'button[title*="—à–∞–±–ª–æ–Ω"]',
                'button[title*="–®–∞–±–ª–æ–Ω"]',
                'button[title*="template"]',
                'button[title="–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω"]',
                'button[aria-label*="—à–∞–±–ª–æ–Ω"]',
                // –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                'button:has(span:contains("–®–∞–±–ª–æ–Ω"))',
                'button:has(span:contains("—à–∞–±–ª–æ–Ω"))',
                // –ü–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º (—Å—Ä–µ–¥–∏ –∫–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏)
                '.message-input-container button:not([disabled])',
                '.input-container button:not([disabled])',
                '.chat-input button:not([disabled])'
            ];
            
            let templateButton = null;
            
            for (const selector of templateButtonSelectors) {
                try {
                    templateButton = document.querySelector(selector);
                    if (templateButton) {
                        console.log('‚úÖ Template button found with selector:', selector);
                        break;
                    }
                } catch (e) {
                    // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            if (!templateButton) {
                console.log('‚ö†Ô∏è Searching template button by text...');
                const allButtons = document.querySelectorAll('button:not([disabled])');
                
                for (const button of allButtons) {
                    const buttonText = button.textContent?.toLowerCase() || '';
                    const title = button.title?.toLowerCase() || '';
                    
                    if (buttonText.includes('—à–∞–±–ª–æ–Ω') || 
                        title.includes('—à–∞–±–ª–æ–Ω') ||
                        buttonText.includes('template') ||
                        title.includes('template')) {
                        templateButton = button;
                        console.log('‚úÖ Template button found by text:', buttonText || title);
                        break;
                    }
                }
            }
            
            if (!templateButton) {
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                console.log('‚ö†Ô∏è Template button not found. Available buttons:');
                const allButtons = document.querySelectorAll('button');
                allButtons.forEach((btn, index) => {
                    if (index < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        console.log(`  ${index + 1}. "${btn.textContent?.trim()}" title="${btn.title}" testid="${btn.getAttribute('data-testid')}"`);
                    }
                });
                throw new Error('Template button not found after extensive search');
            }
            
            templateButton.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –®–∞–≥ 3: –ù–∞–π—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω
            console.log('Step 3: Selecting template...');
            const templates = document.querySelectorAll('div[data-testid="reply-template"]');
            if (templates.length === 0) {
                throw new Error('No templates found in modal');
            }
            
            let targetTemplate = null;
            
            // –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
            for (const template of templates) {
                const text = template.querySelector('div[data-testid="collapsable-text"]')?.textContent;
                if (text && text.includes(templateKeyword)) {
                    targetTemplate = template;
                    break;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            if (!targetTemplate) {
                targetTemplate = templates[0];
                console.log('‚ö†Ô∏è Template with keyword not found, using first template');
            }
            
            const templateTitle = targetTemplate.querySelector('span[data-testid="reply-title"]')?.textContent;
            console.log(`üëÜ Selecting template: ${templateTitle}`);
            
            targetTemplate.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω
            console.log('Step 4: Checking inserted text...');
            const messageInput = document.querySelector('textarea') || document.querySelector('[contenteditable="true"]');
            const insertedText = messageInput?.value || messageInput?.textContent || messageInput?.innerText;
            
            if (!insertedText) {
                throw new Error('Template text was not inserted');
            }
            
            console.log('‚úÖ Template text inserted:', insertedText.substring(0, 100) + '...');
            
            // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            if (sendMessage) {
                console.log('Step 5: Sending message...');
                const sendButton = document.querySelector('button[title*="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]') || 
                                  document.querySelector('button[type="submit"]:not([disabled])');
                
                if (sendButton) {
                    console.log('üëÜ Clicking send button...');
                    sendButton.click();
                    console.log('‚úÖ Message sent successfully!');
                } else {
                    console.log('‚ùå Send button not found, message not sent');
                }
            } else {
                console.log('Step 5: Skipping send (dry run mode)');
            }
            
            console.log(`\nüéâ Template successfully sent to appeal ${selectedAppeal.id}!`);
            return {
                success: true,
                appealId: selectedAppeal.id,
                templateTitle: templateTitle,
                messageSent: sendMessage
            };
            
        } catch (error) {
            console.error('‚ùå Error sending template:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    async quickSendTemplate() {
        return await this.sendTemplateToActiveAppeal('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', true);
    }

    // –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
    async testSendTemplate() {
        return await this.sendTemplateToActiveAppeal('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', false);
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
    diagnoseAppeals() {
        console.log('\nüîç APPEAL DIAGNOSIS REPORT\n');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const scrollBoxRoot = document.querySelector('#scroll-box-root');
        console.log('üì¶ Container #scroll-box-root:', scrollBoxRoot ? '‚úÖ Found' : '‚ùå Not found');
        
        if (scrollBoxRoot) {
            const children = scrollBoxRoot.children;
            console.log(`üìã Children in container: ${children.length}`);
            
            for (let i = 0; i < Math.min(children.length, 5); i++) {
                const child = children[i];
                const testId = child.getAttribute('data-testid');
                const className = child.className;
                console.log(`  ${i + 1}. testid="${testId}" class="${className.substring(0, 30)}..."`);
            }
        }
        
        // –ò—â–µ–º appeal-preview —ç–ª–µ–º–µ–Ω—Ç—ã
        const appealPreviews = document.querySelectorAll('[data-testid="appeal-preview"]');
        console.log(`\nüì¨ Appeal previews found: ${appealPreviews.length}`);
        
        appealPreviews.forEach((element, index) => {
            const info = this.extractAppealInfo(element);
            const rect = element.getBoundingClientRect();
            
            console.log(`  Appeal ${index + 1}:`);
            console.log(`    Name: ${info.name}`);
            console.log(`    Text: ${info.text?.substring(0, 50)}...`);
            console.log(`    Status: ${info.status}`);
            console.log(`    Size: ${Math.round(rect.width)}x${Math.round(rect.height)}`);
            console.log(`    Position: ${Math.round(rect.left)}, ${Math.round(rect.top)}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–µ–π–¥–∂–∞
            const badge = element.querySelector('[data-testid="badge"], [data-testid="dot"]');
            console.log(`    Badge: ${badge ? '‚úÖ Has badge' : '‚ùå No badge'}`);
        });
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        console.log('\nüéØ Active appeal search:');
        const activeAppeal = this.findActiveAppeal();
        if (activeAppeal) {
            const info = this.extractAppealInfo(activeAppeal);
            console.log(`‚úÖ Active appeal: ${info.name || info.id}`);
        } else {
            console.log('‚ùå No active appeal found');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤
        const templateButton = document.querySelector('button[data-testid="choose-templates"]');
        console.log(`\nüìã Template button: ${templateButton ? '‚úÖ Found' : '‚ùå Not found'}`);
        
        return {
            containerFound: !!scrollBoxRoot,
            appealsCount: appealPreviews.length,
            activeAppeal: activeAppeal ? this.extractAppealInfo(activeAppeal) : null,
            templateButton: !!templateButton
        };
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    interceptNetwork() {
        console.log('üåê Starting network interception...');
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const [url] = args;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ appealId
            if (url && url.includes('appealId=')) {
                const match = url.match(/appealId=(\d+)/);
                if (match) {
                    const appealId = match[1];
                    console.log('üì° Network: Found appealId in request:', appealId);
                    
                    if (!this.appeals.has(appealId)) {
                        this.appeals.set(appealId, {
                            id: appealId,
                            source: 'network',
                            status: 'new',
                            timestamp: Date.now()
                        });
                        
                        console.log('üÜï New appeal from network:', appealId);
                    }
                }
            }
            
            return originalFetch.apply(window, args);
        };
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStats() {
        const stats = {
            total: this.appeals.size,
            new: 0,
            read: 0,
            unknown: 0
        };
        
        this.appeals.forEach(appeal => {
            stats[appeal.status]++;
        });
        
        return stats;
    }
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
    listAppeals() {
        console.log('üìã All detected appeals:');
        this.appeals.forEach((appeal, id) => {
            console.log(`  ${id}: ${appeal.status} (${new Date(appeal.timestamp).toLocaleTimeString()})`);
        });
        
        return Array.from(this.appeals.values());
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    clear() {
        this.appeals.clear();
        console.log('üßπ Appeals cleared');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
window.appealMonitor = new AppealMonitor();

console.log('\nüìä APPEAL MONITOR READY (MANUAL MODE)\n');
console.log('Basic Commands:');
console.log('  appealMonitor.start()                - Start monitoring');
console.log('  appealMonitor.stop()                 - Stop monitoring');
console.log('  appealMonitor.getStats()             - Get statistics');
console.log('  appealMonitor.listAppeals()          - List all appeals');
console.log('  appealMonitor.clear()                - Clear all data');
console.log('  appealMonitor.checkForAppeals()      - Manual check');
console.log('\nDiagnostics:');
console.log('  appealMonitor.diagnoseAppeals()      - üîç DIAGNOSTIC REPORT (start here!)');
console.log('  appealMonitor.findAppealsInSidebar() - Find appeals in sidebar');
console.log('  appealMonitor.getSidebarAppeals()    - Get sidebar appeals list');
console.log('  appealMonitor.findActiveAppeal()     - Find active appeal element');
console.log('  appealMonitor.selectActiveAppeal()   - Select and click active appeal');
console.log('\nTemplate Automation:');
console.log('  appealMonitor.testSendTemplate()     - Test template sending (dry run)');
console.log('  appealMonitor.quickSendTemplate()    - Send template to active appeal');
console.log('  appealMonitor.sendTemplateToActiveAppeal(keyword, send) - Full control');
console.log('\nüöÄ Quick Start:');
console.log('  1. appealMonitor.diagnoseAppeals()   - Check if appeals are detected');
console.log('  2. appealMonitor.testSendTemplate()  - Test the full process (safe)');
console.log('  3. appealMonitor.quickSendTemplate() - Send template to active appeal');
console.log('\nüîÑ CONTROLLED AUTO-MONITORING ENABLED');
console.log('\nüí° New appeals will be detected and processed automatically (with spam protection)');

// –ö–û–ù–¢–†–û–õ–ò–†–£–ï–ú–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö
// –ë–µ–∑ —Å–ø–∞–º–∞, –Ω–æ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º
setTimeout(() => {
    window.appealMonitor.start();
    console.log('‚úÖ AppealMonitor started in controlled mode');
}, 2000);

console.log('\nüö´ Spam protection: Active (controlled processing only)');
console.log('Manual commands still available: appealMonitor.stop(), appealMonitor.quickSendTemplate()');